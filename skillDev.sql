-- phpMyAdmin SQL Dump
-- version 5.2.1
-- https://www.phpmyadmin.net/
--
-- Host: localhost
-- Generation Time: Oct 31, 2024 at 10:14 AM
-- Server version: 10.4.28-MariaDB
-- PHP Version: 8.2.4

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Database: `skilldev`
--

-- --------------------------------------------------------

--
-- Table structure for table `failed_jobs`
--

CREATE TABLE `failed_jobs` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `uuid` varchar(255) NOT NULL,
  `connection` text NOT NULL,
  `queue` text NOT NULL,
  `payload` longtext NOT NULL,
  `exception` longtext NOT NULL,
  `failed_at` timestamp NOT NULL DEFAULT current_timestamp()
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `inboxes`
--

CREATE TABLE `inboxes` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `name` varchar(255) NOT NULL,
  `email` varchar(255) NOT NULL,
  `subject` varchar(255) NOT NULL,
  `message` text NOT NULL,
  `seen` tinyint(1) NOT NULL DEFAULT 0,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `migrations`
--

CREATE TABLE `migrations` (
  `id` int(10) UNSIGNED NOT NULL,
  `migration` varchar(255) NOT NULL,
  `batch` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `migrations`
--

INSERT INTO `migrations` (`id`, `migration`, `batch`) VALUES
(36, '2024_10_28_174851_add_options_to_questions_table', 1),
(47, '2014_10_12_000000_create_users_table', 2),
(48, '2014_10_12_100000_create_password_resets_table', 2),
(49, '2019_08_19_000000_create_failed_jobs_table', 2),
(50, '2019_12_14_000001_create_personal_access_tokens_table', 2),
(51, '2023_01_02_092829_create_skill_controllers_table', 2),
(52, '2023_01_02_093018_create_skills_table', 2),
(53, '2023_01_02_093116_create_topics_table', 2),
(54, '2023_01_02_093214_create_questions_table', 2),
(55, '2023_01_02_093244_create_results_table', 2),
(56, '2023_03_26_213310_add_image_to_skills', 2),
(57, '2023_03_29_095907_create_rich_texts_table', 2),
(58, '2023_03_31_175910_create_inboxes_table', 2);

-- --------------------------------------------------------

--
-- Table structure for table `password_resets`
--

CREATE TABLE `password_resets` (
  `email` varchar(255) NOT NULL,
  `token` varchar(255) NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `personal_access_tokens`
--

CREATE TABLE `personal_access_tokens` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `tokenable_type` varchar(255) NOT NULL,
  `tokenable_id` bigint(20) UNSIGNED NOT NULL,
  `name` varchar(255) NOT NULL,
  `token` varchar(64) NOT NULL,
  `abilities` text DEFAULT NULL,
  `last_used_at` timestamp NULL DEFAULT NULL,
  `expires_at` timestamp NULL DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `questions`
--

CREATE TABLE `questions` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `question` varchar(255) NOT NULL,
  `topic_id` bigint(20) UNSIGNED NOT NULL,
  `option1` varchar(255) DEFAULT NULL,
  `option2` varchar(255) DEFAULT NULL,
  `answer` tinyint(4) NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  `deleted_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `questions`
--

INSERT INTO `questions` (`id`, `question`, `topic_id`, `option1`, `option2`, `answer`, `created_at`, `updated_at`, `deleted_at`) VALUES
(4, 'What is the correct file extension for C source files?', 4, '.c', '.cpp', 1, '2024-10-29 11:31:31', '2024-10-30 11:52:57', NULL),
(5, 'Which function is used to print output to the console in C?', 5, 'print()', 'printf()', 2, '2024-10-29 11:33:02', '2024-10-29 11:33:02', NULL),
(6, 'How are comments written in C?', 6, '// This is a comment', '<!-- This is a comment -->', 1, '2024-10-29 11:34:38', '2024-10-29 11:34:38', NULL),
(7, 'Which keyword is used to declare a constant variable?', 7, 'const', 'constant', 1, '2024-10-29 11:36:13', '2024-10-29 11:36:13', NULL),
(8, 'What is the correct syntax to declare an integer variable in C?', 8, 'int num;', 'integer num;', 1, '2024-10-29 11:38:24', '2024-10-29 11:38:24', NULL),
(9, 'Which header file is required for using the printf() function?', 9, '<stdio.h>', '<conio.h>', 1, '2024-10-29 11:41:07', '2024-10-29 11:41:07', NULL),
(10, 'What is the output of printf(\"%d\", 5 + 2);?', 10, '52', '7', 2, '2024-10-29 11:42:36', '2024-10-29 11:42:36', NULL),
(11, 'Which data type is used to store a single character in C?', 11, 'character', 'char', 2, '2024-10-29 11:44:37', '2024-10-29 11:44:37', NULL),
(12, 'Which article completes the sentence? \"___ apple is red.\"', 12, 'An', 'A', 1, '2024-10-29 13:30:44', '2024-10-29 13:30:44', NULL),
(13, 'Which preposition fits? \"He is ___ the park.\"', 13, 'at', 'to', 1, '2024-10-29 13:32:14', '2024-10-29 13:32:14', NULL),
(14, 'What is the correct form of the verb? \"She ___ yesterday.\"', 14, 'go', 'went', 2, '2024-10-29 13:33:24', '2024-10-29 13:33:24', NULL),
(15, 'Which pronoun is correct? \"___ is my friend.\"', 15, 'Her', 'She', 2, '2024-10-29 13:34:44', '2024-10-29 13:34:44', NULL),
(16, 'Which word is an adjective? \"The car is very ___.\"', 16, 'fast', 'quickly', 1, '2024-10-29 13:36:23', '2024-10-29 13:36:23', NULL),
(17, 'Which word is an adverb? \"She runs ___.\"', 17, 'quickly', 'quick', 1, '2024-10-29 13:37:53', '2024-10-29 13:37:53', NULL),
(18, 'print (\"Hello World\")', 18, 'Hello World', 'hello world', 1, '2024-10-30 11:22:03', '2024-10-30 11:22:03', NULL),
(19, 'Which Platforms React Native supports?', 19, 'IOS and Android', 'Windows', 1, '2024-10-30 11:25:09', '2024-10-30 11:25:09', NULL),
(20, 'Full Form PHP?', 20, 'Hypertext Processor', 'Hypertext Preprocessor', 2, '2024-10-30 11:27:37', '2024-10-30 11:27:37', NULL),
(21, 'What does CRUD stand for in software development?', 21, 'Code, Run, Update, Debug', 'Create, Read, Update, Delete', 2, '2024-10-30 11:32:01', '2024-10-30 11:32:01', NULL),
(22, 'When did Bangladesh officially gain independence?', 22, 'March 26, 1971', 'December 16, 1971', 2, '2024-10-30 11:35:15', '2024-10-30 11:35:15', NULL),
(23, 'What is the primary purpose of sociology?', 23, 'To study the human mind and behavior', 'To study society, social relationships, and social institutions', 2, '2024-10-30 11:39:38', '2024-10-30 11:39:38', NULL),
(24, 'What is a democracy?', 24, 'A system where one person holds absolute power', 'A system where power is held by the people, often through elected representatives', 2, '2024-10-30 11:43:20', '2024-10-30 11:43:20', NULL);

-- --------------------------------------------------------

--
-- Table structure for table `results`
--

CREATE TABLE `results` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `topic_id` bigint(20) UNSIGNED NOT NULL,
  `user_id` bigint(20) UNSIGNED NOT NULL,
  `result` varchar(255) NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  `deleted_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `rich_texts`
--

CREATE TABLE `rich_texts` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `record_type` varchar(255) NOT NULL,
  `record_id` bigint(20) UNSIGNED NOT NULL,
  `field` varchar(255) NOT NULL,
  `body` longtext DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `skills`
--

CREATE TABLE `skills` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `name` varchar(255) NOT NULL,
  `image` varchar(255) DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  `deleted_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `skills`
--

INSERT INTO `skills` (`id`, `name`, `image`, `created_at`, `updated_at`, `deleted_at`) VALUES
(1, 'C Programming', '20241028181927.jpg', '2024-10-28 12:19:27', '2024-10-28 12:19:27', NULL),
(2, 'English Learning', '20241029175520.jpg', '2024-10-29 11:55:20', '2024-10-29 11:55:20', NULL),
(3, 'Programming with Python', '20241029180045.jpeg', '2024-10-29 12:00:45', '2024-10-29 12:00:45', NULL),
(4, 'App Development', '20241029180416.png', '2024-10-29 12:04:16', '2024-10-29 12:04:16', NULL),
(5, 'Web Development', '20241029180712.jpg', '2024-10-29 12:07:12', '2024-10-29 12:07:12', NULL),
(6, 'Software Development', '20241029180822.jpeg', '2024-10-29 12:08:22', '2024-10-29 12:08:22', NULL),
(7, 'General Knowledge', '20241030171609.jpg', '2024-10-30 11:16:09', '2024-10-30 11:16:09', NULL),
(8, 'Social Science', '20241030171732.jpg', '2024-10-30 11:17:32', '2024-10-30 11:17:32', NULL),
(9, 'Political Science', '20241030171833.jpg', '2024-10-30 11:18:33', '2024-10-30 11:18:33', NULL);

-- --------------------------------------------------------

--
-- Table structure for table `skill_controllers`
--

CREATE TABLE `skill_controllers` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `topics`
--

CREATE TABLE `topics` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `title` varchar(255) NOT NULL,
  `docs` text NOT NULL,
  `skill_id` bigint(20) UNSIGNED NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  `deleted_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `topics`
--

INSERT INTO `topics` (`id`, `title`, `docs`, `skill_id`, `created_at`, `updated_at`, `deleted_at`) VALUES
(4, 'Introduction', '<div><br>C is a general−purpose, high−level language that was originally developed by Dennis M. Ritchie to develop the UNIX operating system at Bell Labs. C was originally first implemented on the DEC PDP-11 computer in 1972.<br><br></div><div><br>In 1978, Brian Kernighan and Dennis Ritchie produced the first publicly available description of C, now known as the K&amp;R standard.<br><br></div><div><br>The UNIX operating system, the C compiler, and essentially all UNIX application programs have been written in C. C has now become a widely used professional language for various reasons −<br><br></div><ul><li>Easy to learn</li><li>Structured language</li><li>It produces efficient programs</li><li>It can handle low−level activities</li><li>It can be compiled on a variety of computer platforms</li></ul><div><br>Facts about C<br><br></div><ul><li>C was invented to write an operating system called UNIX.</li><li>C is a successor of B language which was introduced around the early 1970s.</li><li>The language was formalized in 1988 by the American National Standard Institute (ANSI).</li><li>The UNIX OS was totally written in C.</li><li>Today C is the most widely used and popular System Programming Language.</li><li>Most of the state-of-the-art software have been implemented using C.</li><li>Today\'s most popular Linux OS and RDBMS MySQL have been written in C.</li></ul><div><br>Why Use C Language?<br><br></div><div><br>C was initially used for system development work, particularly the programs that make-up the operating system. C was adopted as a system development language because it produces code that runs nearly as fast as the code written in assembly language.&nbsp;<br><br></div><div><br>Some examples of the use of C might be −<br><br></div><ul><li>Operating Systems</li><li>Language Compilers</li><li>Assemblers</li><li>Text Editors</li><li>Print Spoolers</li><li>Network Drivers</li><li>Modern Programs</li><li>Databases</li><li>Language Interpreters</li><li>Utilities</li></ul><div><br>C covers all the basic concepts of programming. It\'s a base or mother programming language to learn object−oriented programming like <a href=\"https://www.tutorialspoint.com/cplusplus/index.htm\">C++</a>, <a href=\"https://www.tutorialspoint.com/java/index.htm\">Java</a>, <a href=\"https://www.tutorialspoint.com/dotnet_core/index.htm\">.Net</a>, etc. Many modern programming languages such as C++, Java, and <a href=\"https://www.tutorialspoint.com/python/index.htm\">Python</a> have borrowed syntax and concepts from C.<br><br></div><div><br>It provides fine-grained control over hardware, making it highly efficient. As a result, C is commonly used to develop system−level programs, like designing <a href=\"https://www.tutorialspoint.com/operating_system/index.htm\">Operating Systems</a>, OS kernels, etc., and also used to develop applications like Text Editors, Compilers, Network Drivers, etc.<br><br></div><div><br>C programs are portable; hence they can run on different platforms without significant modifications.<br><br></div><div><br>C has played a pivotal role as a fundamental programming language over the course of programming history. However, its popularity for application development has somewhat diminished in comparison to more contemporary languages. This may be attributed to its low−level characteristics and the existence of higher−level languages that offer a greater abundance of pre−existing abstractions and capabilities. Nevertheless, the use of the programming language C remains indispensable in domains where factors such as optimal performance, meticulous management of system resources, and the imperative need for portability hold utmost significance.<br><br></div><div><br></div><div><a href=\"https://www.tutorialspoint.com/latest/courses?utm_source=tutorialspoint&amp;utm_medium=tutorials_3p&amp;utm_campaign=internal\"><br>Explore our&nbsp;<strong>latest online courses</strong>&nbsp;and learn new skills at your own pace. Enroll and become a certified expert to boost your career.<br></a><br></div><div><br>Advantages of C Language<br><br></div><div><br>The following are the advantages of C language −<br><br></div><ul><li><strong>Efficiency and speed</strong> − C is known for being high−performing and efficient. It can let you work with memory at a low level, as well as allow direct access to hardware, making it ideal for applications requiring speed and economical resource use.</li><li><strong>Portable</strong> − C programs can be compiled and executed on different platforms with minimal or no modifications. This portability is due to the fact that the language has been standardized and compilers are available for use on various operating systems globally.</li><li><strong>Close to Hardware</strong> − C allows direct manipulation of hardware through the use of <a href=\"https://www.tutorialspoint.com/cprogramming/c_pointers.htm\">pointers</a> and low−level operations. This makes it suitable for system programming and developing applications that require fine-grained control over hardware resources.</li><li><strong>Standard Libraries</strong> − For common tasks such as <a href=\"https://www.tutorialspoint.com/cprogramming/c_input_output.htm\">input/output operations</a>, <a href=\"https://www.tutorialspoint.com/cprogramming/c_strings.htm\">string</a> manipulation, and mathematical computations, C comes with a large standard library which helps developers write code more efficiently by leveraging pre−built functions.</li><li><strong>Structured Programming</strong> − C helps to organize code into modular and easy−to−understand <a href=\"https://www.tutorialspoint.com/cprogramming/c_structures.htm\">structures</a>. With <a href=\"https://www.tutorialspoint.com/cprogramming/c_functions.htm\">functions</a>, <a href=\"https://www.tutorialspoint.com/cprogramming/c_loops.htm\">loops</a>, and <a href=\"https://www.tutorialspoint.com/cprogramming/c_decision_making.htm\">conditionals</a>, developers can produce clear code that is easy to maintain.</li><li><strong>Procedural Language</strong> − C follows a procedural paradigm that is often simpler and more straightforward for some types of programming tasks.</li><li><strong>Versatility</strong> − C language is a versatile programming language and it can be used for various types of software such as system applications, compilers, firmware, application software, etc.</li></ul><div><br>Drawbacks of C Language&nbsp;<br><br></div><div><br>The following are the disadvantages/drawbacks of C language −<br><br></div><ul><li><strong>Manual Memory Management</strong> − C languages need manual memory management, where a developer has to take care of allocating and deallocating memory explicitly.</li><li><strong>No Object−Oriented Feature</strong> − Nowadays, most of the programming languages support the OOPs features. But C language does not support it.</li><li><strong>No Garbage Collection</strong> − C language does not support the concept of Garbage collection. A developer needs to allocate and deallocate memory manually and this can be error-prone and lead to memory leaks or inefficient memory usage.</li><li><strong>No Exception Handling</strong> − C language does not provide any library for handling exceptions. A developer needs to write code to handle all types of expectations.</li></ul><div><br>Applications of C Language<br><br></div><div><br>The following are the applications of C language −<br><br></div><ul><li><strong>System Programming</strong> − C language is used to develop system software which are close to hardware such as operating systems, firmware, language translators, etc.</li><li><strong>Embedded Systems</strong> − C language is used in embedded system programming for a wide range of devices such as microcontrollers, industrial controllers, etc.</li><li><strong>Compiler and Interpreters</strong> − C language is very common to develop language compilers and interpreters.</li><li><strong>Database Systems</strong> − Since C language is efficient and fast for low-level memory manipulation. It is used for developing DBMS and RDBMS engines.&nbsp;</li><li><strong>Networking Software</strong> − C language is used to develop networking software such as protocols, routers, and network utilities.</li><li><strong>Game Development</strong> − C language is widely used for developing games, gaming applications, and game engines.</li><li><strong>Scientific and Mathematical Applications</strong> − C language is efficient in developing applications where scientific computing is required. Applications such as simulations, numerical analysis, and other scientific computations are usually developed in C language.</li><li><strong>Text Editor and IDEs</strong> − C language is used for developing text editors and integrated development environments such as Vim and Emacs.</li></ul><div><br>Getting Started with C Programming<br><br></div><div><br>To learn C effectively, we need to understand its structure first. Every programming language has its programming structure. A typical structure of a C program includes several parts. The following steps show the C structure of a regular C program−<br><br></div><div><br>Include Header Files<br><br></div><div><br>Include necessary header files that contain declarations of functions, <a href=\"https://www.tutorialspoint.com/cprogramming/c_constants.htm\">constants</a>, and macros that can be used in one or more source code files. Some popular header files are as −<br><br></div><div><strong><br>stdio.h</strong> − Provides input and output functions like printf and scanf.<br><br></div><pre>#include &lt;stdio.h&gt;\r\n<br></pre><div><strong><br>stdlib.h</strong> − Contains functions involving memory allocation, rand function, and other utility functions.<br><br></div><pre>#include &lt;stdlib.h&gt;\r\n<br></pre><div><strong><br>math.h</strong> − Includes mathematical functions like <strong>sqrt</strong>, <strong>sin</strong>, <strong>cos</strong>, etc.<br><br></div><pre>#include &lt;math.h&gt;\r\n<br></pre><div><strong><br>string.h</strong> − Includes functions for manipulating strings, such as <strong>strcpy</strong>, <strong>strlen</strong>, etc.<br><br></div><pre>#include &lt;string.h&gt;\r\n<br></pre><div><strong><br>ctype.h</strong> − Functions for testing and mapping characters, like <strong>isalpha</strong>, <strong>isdigit</strong>, etc.<br><br></div><pre>#include &lt;ctype.h&gt;\r\n<br></pre><div><strong><br>stdbool.h</strong> − Defines the boolean data type and values <strong>true</strong> and <strong>false</strong>.<br><br></div><pre>#include &lt;stdbool.h&gt;\r\n<br></pre><div><strong><br>time.h</strong> − Contains functions for working with date and time.<br><br></div><pre>#include &lt;time.h&gt;\r\n<br></pre><div><strong><br>limits.h</strong> − Defines various implementation-specific limits on integer types.<br><br></div><pre>#include &lt;limits.h&gt;\r\n<br></pre><div><br>Macros and Constants<br><br></div><div><br>Define any macros or constants that will be used throughout the program. Macros and constants are optional.<br><br></div><div><br>Example<br><br></div><div><br></div><div>Open Compiler</div><pre>#include &lt;stdio.h&gt;\r\n#define PI 3.14159\r\nint main() {\r\n   float radius = 5.0;\r\n   float area = PI * radius * radius;\r\n\r\n   printf(\"Area of the circle: %f\\n\", area);\r\n   return 0;\r\n}\r\n<br></pre><div><br>Output<br><br></div><pre>Area of the circle: 78.539749\r\n<br></pre><div><br>Global Declarations in C<br><br></div><div><br>Global declarations are optional:<br><br></div><pre>int globalVariable;\r\nvoid sampleFunction();\r\n<br></pre><div><br>Declare global <a href=\"https://www.tutorialspoint.com/cprogramming/c_variables.htm\">variables</a> and functions that will be used across different parts of the program. Take a look at the following <strong>example</strong> −<br><br></div><pre>#include &lt;stdio.h&gt;\r\n\r\n// Global variable declaration\r\nint globalVariable;\r\n\r\nint main() \r\n{\r\n   // Rest of the program\r\n   return 0;\r\n}\r\n<br></pre><div><br>Main Function<br><br></div><div><br>Every C program must have a <a href=\"https://www.tutorialspoint.com/cprogramming/c_main_function.htm\"><strong>main</strong>&nbsp;function</a>. It is the entry point of the program. Take a look at the following <strong>example</strong> −<br><br></div><pre>int main() {\r\n   float radius = 5.0;\r\n   float area = PI * radius * radius;\r\n\r\n   printf(\"Area of the circle: %f\\n\", area);\r\n   return 0;\r\n}\r\n<br></pre><div><br>Functions in C<br><br></div><div><br>Define other functions as needed. The main function may call these functions. Take a look at the following <strong>example</strong>:<br><br></div><pre>#include &lt;stdio.h&gt;\r\n\r\n// Global function declaration\r\nvoid samplefunction();\r\n\r\nint main() {\r\n   // Programming statements\r\n   return 0;\r\n}\r\n\r\n// Global function definition\r\nvoid samplefunction () {\r\n   // Function programming statements implementation\r\n}\r\n<br></pre><div><br>A C program can vary from 3 lines to millions of lines and it should be written into one or more text files with extension <strong>\".c\"</strong>; for example, hello.c. You can use <strong>\"vi\"</strong>, <strong>\"vim\"</strong> or any other text editor to write your C program into a file.<br><br></div><div><br>This tutorial assumes that you know how to edit a text file and how to write source code inside a program file.</div>', 1, '2024-10-29 11:31:31', '2024-10-29 11:31:31', NULL),
(5, 'Feature', '<div><br>Dennis Ritchie and Ken Thompson developed the C programming language in 1972, primarily to re-implement the Unix kernel. Because of its features such as low-level memory access, portability and cross-platform nature etc., C is still extremely popular. Most of the features of C have found their way in many other programming languages.<br><br></div><div><br>The development of C has proven to be a landmark step in the history of computing. Even though different programming languages and technologies dominate today in different application areas such as web development, mobile apps, device drivers and utilities, embedded systems, etc., the underlying technologies of all of them are inspired by the features of C language.&nbsp;<br><br></div><div><br>The utility of any technology depends on its important features. The features also determine its area of application. In this chapter, we shall take an overview of some of the significant features of C language.<br><br></div><div><br>C is a Procedural and Structured Language<br><br></div><div><br>C is described as procedure-oriented and structured programming language. It is procedural because a C program is a series of instructions that explain the procedure of solving a given problem. It makes the development process easier.<br><br></div><div><br>In C, the logic of a process can be expressed in a structured or modular form with the use of <strong>function calls</strong>. C is generally used as an introductory language to introduce programming to school students because of this feature.<br><br></div><div><br>C is a General-Purpose Language<br><br></div><div><br>The C language hasn\'t been developed with a specific area of application as a target. From system programming to photo editing software, the C programming language is used in various applications.<br><br></div><div><br>Some of the common applications of C programming include the development of <a href=\"https://www.tutorialspoint.com/operating_system/index.htm\">Operating Systems</a>, databases, device drivers, etc.<br><br></div><div><br></div><div><a href=\"https://www.tutorialspoint.com/latest/courses?utm_source=tutorialspoint&amp;utm_medium=tutorials_3p&amp;utm_campaign=internal\"><br>Explore our&nbsp;<strong>latest online courses</strong>&nbsp;and learn new skills at your own pace. Enroll and become a certified expert to boost your career.<br></a><br></div><div><br>C is a Fast Programming Language<br><br></div><div><br>C is a compiler-based language which makes the compilation and execution of codes faster. The source code is translated into a hardware-specific machine code, which is easier for the <a href=\"https://www.tutorialspoint.com/computer_fundamentals/computer_cpu.htm\">CPU</a> to execute, without any virtual machine, as some of the other languages like <a href=\"https://www.tutorialspoint.com/java/index.htm\">Java</a> need.<br><br></div><div><br>The fact that C is a statically typed language also makes it faster compared to dynamically typed languages. Being a compiler-based language, it is faster as compared to interpreter-based languages.<br><br></div><div><br>C is Portable<br><br></div><div><br>Another feature of the C language is its portability. C programs are <strong>machine-independent</strong> which means that you can compile and run the same code on various machines with none or some machine-specific changes.<br><br></div><div><br>C programming provides the functionality of using a single code on multiple systems depending on the requirement.<br><br></div><div><br>C is Extensible<br><br></div><div><br>C is an extensible language. It means if a code is already written, you can add new features to it with a few alterations. Basically, it allows adding new features, functionalities, and operations to an existing C program.<br><br></div><div><br>Standard Libraries in C<br><br></div><div><br>Most of the C compilers are bundled with an extensive set of <a href=\"https://www.tutorialspoint.com/c_standard_library/index.htm\">libraries</a>with several built-in functions. It includes OS-specific utilities, string manipulation, mathematical functions, etc.<br><br></div><div><br>Importantly, you can also create your user-defined functions and add them to the existing C libraries. The availability of such a vast scope of functions and operations allows a programmer to build a vast array of programs and applications using the C language.<br><br></div><div><br>Pointers in C<br><br></div><div><br>One of the unique features of C is its ability to manipulate the internal memory of the computer. With the use of pointers in C, you can directly interact with the memory.<br><br></div><div><a href=\"https://www.tutorialspoint.com/cprogramming/c_pointers.htm\"><br>Pointers</a> point to a specific location in the memory and interact directly with it. Using the C pointers, you can interact with external hardware devices, interrupts, etc.<br><br></div><div><br>C is a Mid-Level Programming Language<br><br></div><div><br>High-level languages have features such as the use of mnemonic keywords, user-defined identifiers, modularity etc. C programming language, on the other hand, provides a low-level access to the memory. This makes it a mid-level language.<br><br></div><div><br>As a mid-level programming language, it provides the best of both worlds. For instance, C allows direct manipulation of hardware, which high-level programming languages do not offer.<br><br></div><div><br>C Has a Rich Set of Built-in Operators<br><br></div><div><br>C is perhaps the language with the most number of built-in <a href=\"https://www.tutorialspoint.com/cprogramming/c_operators.htm\">operators</a>which are used in writing complex or simplified C programs. In addition to the traditional <a href=\"https://www.tutorialspoint.com/cprogramming/c_arithmetic_operators.htm\">arithmetic</a> and <a href=\"https://www.tutorialspoint.com/cprogramming/c_relational_operators.htm\">comparison operators</a>, its binary and pointer related operators are important when bit-level manipulations are required.<br><br></div><div><br>Recursion in C<br><br></div><div><br>C language provides the feature of recursion. Recursion means that you can create a function that can call itself multiple times until a given condition is true, just like the loops.<br><br></div><div><a href=\"https://www.tutorialspoint.com/cprogramming/c_recursion.htm\"><br>Recursion in C programming</a> provides the functionality of code reusability and backtracking.<br><br></div><div><br>User-defined Data Types in C<br><br></div><div><br>C has three basic <a href=\"https://www.tutorialspoint.com/cprogramming/c_data_types.htm\">data types</a> in <strong>int</strong>, <strong>float</strong> and <strong>char</strong>. However, C programming has the provision to define a data type of any combination of these three types, which makes it very powerful.<br><br></div><div><br>In C, you can define <a href=\"https://www.tutorialspoint.com/cprogramming/c_structures.htm\"><strong>structures</strong></a> and <a href=\"https://www.tutorialspoint.com/cprogramming/c_unions.htm\"><strong>union</strong></a> types. You also have the feature of declaring <strong>enumerated data types</strong>.&nbsp;<br><br></div><div><br>Preprocessor Directives in C<br><br></div><div><br>In C, we have <a href=\"https://www.tutorialspoint.com/cprogramming/c_preprocessors.htm\">preprocessor directives</a> such as <strong>#include</strong>, <strong>#define</strong>, etc. They are not the language keywords. Preprocessor directives in C carry out some of the important roles such as importing functions from a library, defining and expanding the macros, etc.<br><br></div><div><br>File Handling in C<br><br></div><div><br>C language doesn\'t directly manipulate files or streams. Handling file IO is not a part of the C language itself but instead is handled by libraries and their associated header files.<br><br></div><div><a href=\"https://www.tutorialspoint.com/cprogramming/c_file_io.htm\"><br>File handling</a> is generally implemented through high-level I/O which works through streams. C identifies stdin, <strong>stdout</strong> and <strong>stderr</strong> as standard input, output and error streams. These streams can be directed to a disk file to perform read/write operations.<br><br></div><div><br>These are some of the important features of C language that make it one of the widely used and popular computer languages.<br><br></div>', 1, '2024-10-29 11:33:02', '2024-10-29 11:33:02', NULL),
(6, 'Comments', '<div><br>Using <strong>comments</strong> in a C program increases the readability of the code. You must intersperse the code with comments at appropriate places. As far as the compiler is concerned, the comments are ignored. In C, the comments are one or more lines of text, that the compiler skips while building the machine code.<br><br></div><div><br>The <strong>comments</strong> in C play an important part when the program needs to be modified, especially by somebody else other than those who have written it originally. Putting comments is often not given importance by the programmer, but using them effectively is important to improve the quality of the code.<br><br></div><div><br>Why to Use Comments in C Programming?<br><br></div><div><br>Any programming language, including C, is less verbose as compared to any human language like English. It has far less number of <a href=\"https://www.tutorialspoint.com/cprogramming/c_keywords.htm\">keywords</a>, C being one of the smallest languages with only 32 keywords. Hence, the instructions in a C program can be difficult to understand, especially for someone with non-programming background.<br><br></div><div><br>The <a href=\"https://www.tutorialspoint.com/cprogramming/c_basic_syntax.htm\">C language syntax</a> also varies and is also complicated. Usually, the programmer tries to add complexity to optimize the code. However, it makes the code hard to understand. <strong>Comments provide a useful explanation and convey the intention behind the use of a particular approach</strong>.<br><br></div><div><br>For example, take the case of the <strong>?:</strong> operator in C, which is a shortcut for the <a href=\"https://www.tutorialspoint.com/cprogramming/if_else_statement_in_c.htm\">if-else statement</a>.<br><br></div><div><br>So, instead of the following code −<br><br></div><pre>if (a % 2 == 0){\r\n   printf(\"%d is Even\\n\", a);\r\n} else {\r\n   printf(\"%d is Odd\\n\", a);\r\n}\r\n<br></pre><div><br>One can use the following statement −<br><br></div><pre>(a % 2 == 0) ? printf(\"%d is Even\\n\", a) : printf(\"%d is Odd\\n\", a);\r\n<br></pre><div><br>Obviously, the second method is more complicated than the first. If useful comments are added, it makes easier to understand the intention and logic of the statement used.<br><br></div><div><br>Types of Comments in C<br><br></div><div><br>In C, there are two types of comments −<br><br></div><ul><li>Single-line comments</li><li>Multi-line comments</li></ul><div><br>Single-line Comment in C<br><br></div><div><br>The C++-style single-line comments were incorporated in C compilers with C99 standards. If any text begins with the <strong>//</strong> symbol, the rest of the line is treated as a comment.<br><br></div><div><br>The text followed by a double oblique or forward slash [<strong>//</strong>] in a code is treated as a single-line comment. All that text after <strong>//</strong> is ignored by the <a href=\"https://www.tutorialspoint.com/compile_c_online.php\">C compiler</a> during compilation. Unlike the multi-line or block comment, it need not be closed.<br><br></div><div><br>Syntax of Single-line C Comment<br><br></div><pre>//comment text\r\n<br></pre><div><br>The <strong>//</strong> symbol can appear anywhere. It indicates that all the text following it till the end of the line is a comment. The subsequent line in the editor is again a place to write a valid C statement.<br><br></div><div><br>Example: Single-line Comment in C<br><br></div><div><br>Take a look at the following program and observe how we have used single-line comments inside its main function −<br><br></div><div><br></div><div>Open Compiler</div><pre>/* Online C Compiler and Editor */\r\n#include &lt;stdio.h&gt;\r\n#include &lt;math.h&gt;\r\n\r\n/*forward declaration of function*/\r\nfloat area_of_square(float);\r\n\r\nfloat area_of_square(float side){\r\n   float area = pow(side,2);\r\n   return area;\r\n}\r\n\r\n// main function - entire line is a comment\r\nint main(){\r\n\r\n   // variable declaration (this comment is after the C statement)\r\n   float side = 5.50; \r\n     \r\n   float area = area_of_square(side);   // calling a function\r\n   printf (\"Side = %5.2f Area = %5.2f\", side, area);\r\n\r\n   return 0;\r\n}\r\n<br></pre><div><br>Output<br><br></div><div><br>When you run this code, it will produce the following output −<br><br></div><pre>Side = 5.50 Area = 30.25\r\n<br></pre><div><br>Multi-line Comment in C<br><br></div><div><br>In <a href=\"https://www.tutorialspoint.com/cprogramming/c_history.htm\">early versions of C</a> (ANSI C), any length of text put in between the symbols <strong>/*</strong> and <strong>*/</strong> is treated as a comment. The text may be spread across multiple lines in the code file. You may call it a multi-line comment. A block of consecutive lines is treated as a comment.<br><br></div><div><br>Syntax of Multi-line C Comment<br><br></div><div><br>The general structure of a multi-line comment is as follows −<br><br></div><pre>/* The comment starts here\r\nLine 1\r\nLine 2\r\n…..\r\n…..\r\nComment ends here*/\r\n<br></pre><div><br>For example −&nbsp;<br><br></div><pre>/*\r\nExample of a multi-line comment\r\nprogram to print Hello World\r\nusing printf() function\r\n*/\r\n<br></pre><div><br>Obviously, since the comments are ignored by the compiler, the syntax rules of C language don\'t apply to the comment text.<br><br></div><div><strong><br>Comments</strong> can appear anywhere in a program, at the top, in between the code, or at the beginning of a <a href=\"https://www.tutorialspoint.com/cprogramming/c_functions.htm\">function</a> or a <a href=\"https://www.tutorialspoint.com/cprogramming/c_structures.htm\">struct declaration</a>, etc.<br><br></div><div><br>Example: Multi-line Comment in C<br><br></div><div><br>In this example, we have a multi-line comment that explains the role of a particular user-defined function used in the given code −&nbsp;<br><br></div><div><br></div><div>Open Compiler</div><pre>/* program to calculate area of square */\r\n\r\n/* headers */\r\n#include &lt;stdio.h&gt;\r\n#include &lt;math.h&gt;\r\n\r\n/* forward declaration of function */\r\nfloat area_of_square(float);\r\n\r\n\r\n/* main function */\r\nint main(){\r\n\r\n   /* variable declaration */\r\n   float side = 5.50;\r\n   \r\n   /* calling function */\r\n   float area = area_of_square(side);\r\n   printf(\"Side = %5.2f Area = %5.2f\", side, area);\r\n\r\n   return 0;\r\n}\r\n\r\n/* User-defined function to calculate\r\nthe area of square. It takes side as the argument \r\nand returns the area */\r\n\r\nfloat area_of_square(float side){\r\n   float area = pow(side, 2);\r\n   return area;\r\n}\r\n<br></pre><div><br>Output<br><br></div><div><br>When you execute the code, it will produce the following output −<br><br></div><pre>Side = 5.50 Area = 30.25\r\n<br></pre><div><br>While inserting a comment, you must make sure that for every comment starting with <strong>/*</strong>, there must be a corresponding <strong>*/</strong> symbol. If you start a comment with <strong>/*</strong> and fail to close it, then the compiler will throw an error.<br><br></div><div><strong><br>Note:</strong> A blocked comment or multi-line comment must be put inside <strong>/*</strong>and <strong>*/</strong> symbols, whereas a single-line comment starts with the <strong>//</strong>symbol and is effective till the end of the line.<br><br></div><div><br>Placing comments in a program is always encouraged. Programmers usually avoid the practice of adding comments. However, they can sometimes find it difficult to debug and modify their code if it is not properly commented. Comments are especially vital when the development is done in collaboration. Using comments effectively can be of help to all the members of a team.<br><br></div><div><br>Even though comments are ignored by the compiler, they should be clear in meaning and concise. Whenever the code needs modification, the reason, the timestamp, and the author should be mentioned in comments.<br><br></div>', 1, '2024-10-29 11:34:38', '2024-10-29 11:34:38', NULL),
(7, 'Keywords', '<div><br>Keywords are those predefined words that have special meaning in the compiler and they cannot be used for any other purpose. As per the C99 standard, C language has 32 keywords. Keywords cannot be used as <a href=\"https://www.tutorialspoint.com/cprogramming/c_identifiers.htm\">identifiers</a>.<br><br></div><div><br>The following table has the list of all keywords (reserved words) available in the C language:<br><br></div><div>auto | double | int | struct<br>break | else | long | switch<br>case | enum | register | typedef<br>char | extern | return | union<br>continue | for | signed | void<br>do | if | static | while<br>default | goto | sizeof | volatile<br>const | float | short | unsigned</div><div><br>All the keywords in C have lowercase alphabets, although the keywords that have been newly added in C, do have uppercase alphabets in them. C is a case-sensitive language. Hence, int is a keyword but INT, or Int are not recognized as a keyword. The new keywords introduced from C99 onwards start with an underscore character. The compiler checks the source code for the correctness of the syntax of all the keywords and then translates it into the machine code.<br><br></div><div><br>Example of C Keywords<br><br></div><div><br>In the following program, we are using a keyword as an identifier i.e., as the name of the user-defined function, that will cause a compilation error.<br><br></div><div><br></div><div>Open Compiler</div><pre>#include &lt;stdio.h&gt;\r\n\r\nvoid register(int, int);\r\nint main () {\r\n\r\n   /* variable definition: */\r\n   int a=5, b=7;\r\n   register(a,b);\r\n \r\n   return 0;\r\n}\r\nvoid register(int a, int b)\r\n{\r\n   printf(\"%d\", a+b);\r\n}\r\n<br></pre><div><br>Errors<br><br></div><pre>main.c:3:15: error: expected identifier or \'(\' before \'int\'\r\n    3 | void register(int, int);\r\n      |               ^~~\r\nmain.c: In function \'main\':\r\nmain.c:8:14: error: expected \')\' before \',\' token\r\n    8 |    register(a,b);\r\n      |              ^\r\n      |              )\r\nmain.c: At top level:\r\nmain.c:12:15: error: expected identifier or \'(\' before \'int\'\r\n   12 | void register(int a, int b)\r\n      |               ^\r\n<br></pre><div><br>The reason for the errors is that we are using a keyword register as the name of a user-defined function, which is not allowed.<br><br></div><div><br>The ANSI C version has 32 keywords. These keywords are the basic element of the program logic. These keywords can be broadly classified in following types −<br><br></div><ul><li>Primary Data types</li><li>User defined types</li><li>Storage types</li><li>Conditionals</li><li>Loops and loop controls</li><li>Others</li></ul><div><br>Let us discuss the keywords in each category.<br><br></div><div><br>Primary Types C Keywords<br><br></div><div><br>These keywords are used for <a href=\"https://www.tutorialspoint.com/cprogramming/c_variables.htm\">variable</a> declaration. C is a statically type language, the variable to be used must be declared. Variables in C are declared with the following keywords:<br><br></div><div>int | Declares an integer variable<br>long | Declares a long integer variable<br>short | Declares a short integer variable<br>signed | Declares a signed variable<br>double | Declares a double-precision variable<br>char | Declares a character variable<br>float | Declares a floating-point variable<br>unsigned | Declares an unsigned variable<br>void | Specifies a void return type</div><div><br></div><div><a href=\"https://www.tutorialspoint.com/latest/courses?utm_source=tutorialspoint&amp;utm_medium=tutorials_3p&amp;utm_campaign=internal\"><br>Explore our&nbsp;<strong>latest online courses</strong>&nbsp;and learn new skills at your own pace. Enroll and become a certified expert to boost your career.<br></a><br></div><div><br>User-defined Types C Keywords<br><br></div><div><br>C language allows you to define new <a href=\"https://www.tutorialspoint.com/cprogramming/c_data_types.htm\">data types</a> as per requirement. The user defined type has one or more elements of primary type.&nbsp;<br><br></div><div><br>The following keywords are provided for user defined data types −<br><br></div><div>struct | Declares a structure type<br>typedef | Creates a new data type<br>union | Declares a union type<br>enum | Declares an enumeration type</div><div><br>Storage Types C Keywords<br><br></div><div><br>The following set of keywords are called <a href=\"https://www.tutorialspoint.com/cprogramming/c_storage_classes.htm\">storage specifiers</a>. They indicate the location where in the memory the variables stored. Default storage type of a variable is auto, although you can ask the compiler to form a variable with specific storage properties.<br><br></div><div>auto | Specifies automatic storage class<br>extern | Declares a variable or function<br>static | Specifies static storage class<br>register | Specifies register storage class</div><div><br>Conditionals C Keywords<br><br></div><div><br>The following set of keywords help you to put conditional logic in the program. The conditional logic expressed with if and else keywords provides two alternative actions for a condition. For multi-way branching, use <a href=\"https://www.tutorialspoint.com/cprogramming/switch_statement_in_c.htm\">switch – case</a> construct. In C, the jump operation in an assembler is implemented by the <a href=\"https://www.tutorialspoint.com/cprogramming/c_goto_statement.htm\">goto keyword</a>.<br><br></div><div>goto | Jumps to a labeled statement<br>if | Starts an if statement<br>else | Executes when the if condition is false<br>case | Labels a statement within a switch<br>switch | Starts a switch statement<br>default | Specifies default statement in switch</div><div><br>Loops and Loop Control C Keywords<br><br></div><div><br>Repetition or iteration is an essential aspect of the algorithm. C provides different alternatives for forming a loop, and keywords for controlling the behaviour of the loop. Each of the keywords let you form a loop of different characteristics and usage.<br><br></div><div>For | Starts a <a href=\"https://www.tutorialspoint.com/cprogramming/c_for_loop.htm\"><strong>for-loop</strong></a><br>do | Starts a <a href=\"https://www.tutorialspoint.com/cprogramming/c_do_while_loop.htm\"><strong>do-while loop</strong></a><br>while | starts a <a href=\"https://www.tutorialspoint.com/cprogramming/c_while_loop.htm\"><strong>while loop</strong></a><br><a href=\"https://www.tutorialspoint.com/cprogramming/c_continue_statement.htm\"><strong>continue</strong></a> | Skips an iteration of a loop<br><a href=\"https://www.tutorialspoint.com/cprogramming/c_break_statement.htm\"><strong>break</strong></a> | Terminates a loop or switch statement</div><div><br>Other C Keywords<br><br></div><div><br>The following miscellaneous keywords are also extremely important:<br><br></div><div>const | Specifies a constant value<br>Sizeof | Determines the size of a data type<br>Volatile | compiler that the value of the variable may change at any time</div><div><br>In C99 version, five more keywords were added −<br><br></div><ul><li>_Bool</li><li>_Complex</li><li>_Imaginary</li><li>inline</li></ul><div><br>In C11, seven more keywords have been added<br><br></div><ul><li>_Alignas</li><li>_Alignof</li><li>_Atomic</li><li>_Generic</li><li>_Noreturn</li><li>_Static_assert</li></ul><div><br>When the C23 standard will be released it will introduce 14 more keywords −<br><br></div><ul><li>alignas</li><li>alignof</li><li>bool</li><li>constexpr</li><li>false</li><li>nullptr</li><li>static_assert</li><li>thread_local</li><li>true</li><li>typeof</li><li>typeof_unqual</li><li>_Decimal128</li></ul><div><br>Most of the recently reserved words begin with an underscore followed by a capital letter, Since existing program source code should not have been using these identifiers.&nbsp;<br><br></div><div><br>Following points must be kept in mind when using the keywords:<br><br></div><ul><li>Keywords are reserved by the programming language and have predefined meaning. They cannot be used as name of a variable or function.</li><li>Each keyword has to be used as per the syntax stipulated for its use. If the syntax is violated, the compiler reports compilation errors.</li><li>C is one of the smallest computer languages with only 32 keywords in its ANSI C version, although a few more keywords have been added afterwards.</li></ul>', 1, '2024-10-29 11:36:12', '2024-10-29 11:36:12', NULL);
INSERT INTO `topics` (`id`, `title`, `docs`, `skill_id`, `created_at`, `updated_at`, `deleted_at`) VALUES
(8, 'Data Types', '<div><strong><br>Data types</strong> in C refer to an extensive system used for declaring <a href=\"https://www.tutorialspoint.com/cprogramming/c_variables.htm\">variables</a> or <a href=\"https://www.tutorialspoint.com/cprogramming/c_functions.htm\">functions</a> of different types. The type of a variable determines how much space it occupies in storage and how the bit pattern stored is interpreted. In this chapter, we will learn about <strong>data types in C</strong>. A related concept is that of \"variables\", which refer to the addressable location in the memory of the processor. The data captured via different input devices is stored in the computer memory. A symbolic name can be assigned to the storage location called variable name.<br><br></div><div><br>C is a statically typed language. The name of the variable along with the type of data it intends to store must be explicitly declared before actually using it.<br><br></div><div><br>C is also a strongly typed language, which means that the automatic or implicit conversion of one data type to another is not allowed.<br><br></div><div><br>The types in C can be classified as follows −<br><br></div><div><strong>Sr.No.Types &amp; Description</strong><br>1 | <strong>Basic Types</strong>They are arithmetic types and are further classified into: (a) integer types and (b) floating-point types.<br>2 | <strong>Enumerated types</strong>They are again arithmetic types and they are used to define variables that can only assign certain discrete integer values throughout the program.<br>3 | <strong>The type void</strong>The type specifier void indicates that no value is available.<br>4 | <strong>Derived types</strong>They include (a) Pointer types, (b) Array types, (c) Structure types, (d) Union types and (e) Function types.</div><div><br>The array types and structure types are referred collectively as the aggregate types. The type of a function specifies the type of the function\'s return value. We will see the basic types in the following section, where as other types will be covered in the upcoming chapters.<br><br></div><div><br>Integer Data Types in C<br><br></div><div><br>The following table provides the details of standard integer types with their storage sizes and value ranges −<br><br></div><div><strong>TypeStorage sizeValue range</strong><br>char | 1 byte | -128 to 127 or 0 to 255<br>unsigned char | 1 byte | 0 to 255<br>signed char | 1 byte | -128 to 127<br>int | 2 or 4 bytes | -32,768 to 32,767 or -2,147,483,648 to 2,147,483,647<br>unsigned int | 2 or 4 bytes | 0 to 65,535 or 0 to 4,294,967,295<br>short | 2 bytes | -32,768 to 32,767<br>unsigned short | 2 bytes | 0 to 65,535<br>long | 8 bytes | -9223372036854775808 to 9223372036854775807<br>unsigned long | 8 bytes | 0 to 18446744073709551615</div><div><br>To get the exact size of a type or a variable on a particular platform, you can use the <strong>sizeof</strong> operator. The expressions sizeof(type) yields the storage size of the object or type in bytes.&nbsp;<br><br></div><div><br>Example of Integer Data Types<br><br></div><div><br>Given below is an example to get the size of various type on a machine using different constant defined in limits.h header file −<br><br></div><div><br></div><div>Open Compiler</div><pre>#include &lt;stdio.h&gt;\r\n#include &lt;stdlib.h&gt;\r\n#include &lt;limits.h&gt;\r\n#include &lt;float.h&gt;\r\n\r\nint main(int argc, char** argv) {\r\n\r\n   printf(\"CHAR_BIT    :   %d\\n\", CHAR_BIT);\r\n   printf(\"CHAR_MAX    :   %d\\n\", CHAR_MAX);\r\n   printf(\"CHAR_MIN    :   %d\\n\", CHAR_MIN);\r\n   printf(\"INT_MAX     :   %d\\n\", INT_MAX);\r\n   printf(\"INT_MIN     :   %d\\n\", INT_MIN);\r\n   printf(\"LONG_MAX    :   %ld\\n\", (long) LONG_MAX);\r\n   printf(\"LONG_MIN    :   %ld\\n\", (long) LONG_MIN);\r\n   printf(\"SCHAR_MAX   :   %d\\n\", SCHAR_MAX);\r\n   printf(\"SCHAR_MIN   :   %d\\n\", SCHAR_MIN);\r\n   printf(\"SHRT_MAX    :   %d\\n\", SHRT_MAX);\r\n   printf(\"SHRT_MIN    :   %d\\n\", SHRT_MIN);\r\n   printf(\"UCHAR_MAX   :   %d\\n\", UCHAR_MAX);\r\n   printf(\"UINT_MAX    :   %u\\n\", (unsigned int) UINT_MAX);\r\n   printf(\"ULONG_MAX   :   %lu\\n\", (unsigned long) ULONG_MAX);\r\n   printf(\"USHRT_MAX   :   %d\\n\", (unsigned short) USHRT_MAX);\r\n\r\n   return 0;\r\n}\r\n<br></pre><div><br>Output<br><br></div><div><br>When you compile and execute the above program, it produces the following result on Linux−<br><br></div><pre>CHAR_BIT    :   8\r\nCHAR_MAX    :   127\r\nCHAR_MIN    :   -128\r\nINT_MAX     :   2147483647\r\nINT_MIN     :   -2147483648\r\nLONG_MAX    :   9223372036854775807\r\nLONG_MIN    :   -9223372036854775808\r\nSCHAR_MAX   :   127\r\nSCHAR_MIN   :   -128\r\nSHRT_MAX    :   32767\r\nSHRT_MIN    :   -32768\r\nUCHAR_MAX   :   255\r\nUINT_MAX    :   4294967295\r\nULONG_MAX   :   18446744073709551615\r\nUSHRT_MAX   :   65535\r\n<br></pre><div><br>Floating-Point Data Types in C<br><br></div><div><br>The following table provides the details of standard floating-point types with storage sizes and value ranges and their precision −<br><br></div><div><strong>TypeStorage sizeValue rangePrecision</strong><br>float | 4 byte | 1.2E-38 to 3.4E+38 | 6 decimal places<br>double | 8 byte | 2.3E-308 to 1.7E+308 | 15 decimal places<br>long double | 10 byte | 3.4E-4932 to 1.1E+4932 | 19 decimal places</div><div><br>The header file \"float.h\" defines the macros that allow you to use these values and other details about the binary representation of real numbers in your programs.<br><br></div><div><br>Example Floating-Point Data Types<br><br></div><div><br>The following example prints the storage space taken by a float type and its range values −<br><br></div><div><br></div><div>Open Compiler</div><pre>#include &lt;stdio.h&gt;\r\n#include &lt;stdlib.h&gt;\r\n#include &lt;limits.h&gt;\r\n#include &lt;float.h&gt;\r\n\r\nint main(int argc, char** argv) {\r\n\r\n   printf(\"Storage size for float : %zu \\n\", sizeof(float));\r\n   printf(\"FLT_MAX     :   %g\\n\", (float) FLT_MAX);\r\n   printf(\"FLT_MIN     :   %g\\n\", (float) FLT_MIN);\r\n   printf(\"-FLT_MAX    :   %g\\n\", (float) -FLT_MAX);\r\n   printf(\"-FLT_MIN    :   %g\\n\", (float) -FLT_MIN);\r\n   printf(\"DBL_MAX     :   %g\\n\", (double) DBL_MAX);\r\n   printf(\"DBL_MIN     :   %g\\n\", (double) DBL_MIN);\r\n   printf(\"-DBL_MAX     :  %g\\n\", (double) -DBL_MAX);\r\n   printf(\"Precision value: %d\\n\", FLT_DIG );\r\n\r\n   return 0;\r\n}\r\n<br></pre><div><br>Output<br><br></div><div><br>When you compile and execute the above program, it produces the following result on Linux −<br><br></div><pre>Storage size for float : 4 \r\nFLT_MAX      :   3.40282e+38\r\nFLT_MIN      :   1.17549e-38\r\n-FLT_MAX     :   -3.40282e+38\r\n-FLT_MIN     :   -1.17549e-38\r\nDBL_MAX      :   1.79769e+308\r\nDBL_MIN      :   2.22507e-308\r\n-DBL_MAX     :  -1.79769e+308\r\nPrecision value: 6\r\n<br></pre><div><strong><br>Note:</strong> \"sizeof\" returns \"size_t\". The type of unsigned integer of \"size_t\" can vary depending on platform. And, it may not be long unsigned int everywhere. In such cases, we use \"%zu\" for the format string instead of \"%d\".<br><br></div><div><br>Earlier versions of C did not have Boolean data type. C99 standardization of ANSI C introduced _bool type which treats zero value as false and non-zero as true.<br><br></div><div><br></div><div><a href=\"https://www.tutorialspoint.com/latest/courses?utm_source=tutorialspoint&amp;utm_medium=tutorials_3p&amp;utm_campaign=internal\"><br>Explore our&nbsp;<strong>latest online courses</strong>&nbsp;and learn new skills at your own pace. Enroll and become a certified expert to boost your career.<br></a><br></div><div><br>User-defined Data Types in C<br><br></div><div><br>There are two user-defined data types <a href=\"https://www.tutorialspoint.com/cprogramming/c_structures.htm\">struct</a> and <a href=\"https://www.tutorialspoint.com/cprogramming/c_unions.htm\">union</a>, that can be defined by the user with the help of the combination of other basic data types.<br><br></div><div><br>Struct Data Type<br><br></div><div><br>One of the unique <a href=\"https://www.tutorialspoint.com/cprogramming/c-features.htm\">features of C language</a> is to store values of different data types in one variable. The keywords <strong>struct</strong> and <strong>union</strong> are provided to derive a user-defined data type. For example,<br><br></div><pre>struct student   {   \r\n   char name[20];   \r\n   int marks, age;   \r\n};\r\n<br></pre><div><br>Union Data Type<br><br></div><div><br>A union is a special case of struct where the size of union variable is not the sum of sizes of individual elements, as in struct, but it corresponds to the largest size among individual elements. Hence, only one of elements can be used at a time. Look at following example:<br><br></div><pre>union ab  {  \r\n   int a;  \r\n   float b;  \r\n};  \r\n<br></pre><div><br>We shall learn more about structure and union types in a later chapter.<br><br></div><div><br>The void Data Type in C<br><br></div><div><br>The void type specifies that no value is available. It is used in three kinds of situations −<br><br></div><div><strong>Sr.NoTypes &amp; Description</strong><br>1 | <strong>Function returns as void</strong>There are various functions in C that do not return any value or you can say they return <strong>void</strong>. A function with no return value has the return type as <strong>void</strong>. For example, <strong>void exit (int status);</strong><br>2 | <strong>Function arguments as void</strong>There are various functions in C which do not accept any parameter. A function with no parameter can accept a void. For example, <strong>int rand(void);</strong><br>3 | <strong>Pointers to void</strong>A pointer of type void * represents the address of an object, but not its type. For example, a memory allocation function void <strong>*malloc( size_t size );</strong> returns a pointer to void which can be casted to any data type.</div><div><br>Arrays Data Type in C<br><br></div><div><br>An array is a collection of multiple values of same data type stored in consecutive memory locations. The size of array is mentioned in square brackets []. For example,<br><br></div><pre>int marks[5];\r\n<br></pre><div><br>Arrays can be initialized at the time of declaration. The values to be assigned are put in parentheses.<br><br></div><pre>int marks[ ]={50,56,76,67,43};\r\n<br></pre><div><br>C also supports multi-dimensional arrays. To learn more about arrays, refer to the chapter on <a href=\"https://www.tutorialspoint.com/cprogramming/c_arrays.htm\">Arrays in C</a>.<br><br></div><div><br>Pointers Data Type in C<br><br></div><div><br>A pointer is a special variable that stores address or reference of another variable/object in the memory. The name of pointer variable is prefixed by asterisk (*). The type of the pointer variable and the variable/object to be pointed must be same.<br><br></div><pre>int x;  \r\nint *y;  \r\ny = &amp;x;\r\n<br></pre><div><br>Here, \"y\" is a pointer variable that stores the address of variable \"x\" which is of \"int\" type.<br><br></div><div><br>Pointers are used for many different purposes. Text string manipulation and dynamic memory allocation are some of the processes where the use of pointers is mandatory. Later in this tutorial, you can find a detailed chapter on <a href=\"https://www.tutorialspoint.com/cprogramming/c_pointers.htm\">Pointers in C</a>.<br><br></div>', 1, '2024-10-29 11:38:24', '2024-10-29 11:38:24', NULL),
(9, 'Variables', '<div><br>A <strong>variable</strong> is nothing but a name given to a storage area that our programs can manipulate. Each variable in C has a specific type, which determines the size and layout of the variable\'s memory; the range of values that can be stored within that memory; and the set of operations that can be applied to the variable.<br><br></div><div><br>Why Do We Use Variables in C?<br><br></div><div><br>A variable in C is a user-assigned name to a certain location in the computer’s memory, which is a collection of a large number of randomly accessible locations capable of holding a single bit. Each location in the memory is identified by a unique address, expressed in binary (or Hexa-decimal for convenience) format.<br><br></div><div><br>Since it is extremely cumbersome to store and process the data in the memory by referring to their locations in binary form, high-level languages such as C let the locations be identified by user-defined names or variables.<br><br></div><div><br>Instead of identifying a free memory location and assigning it a value, you can find a suitable mnemonic identifier and assign it a value. The C compiler will choose an appropriate location and bind it to the identifier specified by you.<br><br></div><div><br>Naming Conventions of C Variables<br><br></div><div><br>The name of the variable must start with an alphabet (upper or lowercase) or an underscore (_). It may consist of alphabets (upper or lowercase), digits, and underscore characters. No other characters can be a part of the name of a variable in C.<br><br></div><div><br>Variable names in C are case-sensitive. For example, \"age\" is not the same as \"AGE\".<br><br></div><div><br>The ANSI standard recognizes a length of 31 characters for a variable name. Although you can choose a name with more characters, only the first 31 will be recognized. Using a descriptive name for a variable, that reflects the value it intends to store is considered to be a good practice. Avoid using very short variable names that might confuse you.<br><br></div><div><br>C is a statically typed language. Hence, the data type of the variable must be mentioned in the declaration before its name. A variable may be declared inside a function (local variable) or globally. More than one variable of the same type may be declared in a single statement.<br><br></div><div><br>Example<br><br></div><div><br>Based on the above set of rules and conventions, here are some valid and invalid variable names:<br><br></div><pre>int _num = 5;        // valid integer variable\r\nfloat marks = 55.50; // valid float variable\r\nchar choice = \'0\';   // valid char variable\r\n\r\n// invalid variable name\r\n// cannot use \"-\"\r\nint sub-1 = 35;      \r\n\r\n//invalid; must have data type\r\navg = 50;            \r\n\r\n// invalid; name can be used for \r\n// declaration only once in a function\r\nint choice = 0;\r\n\r\n// Valid integer name\r\nint sal_of_employee = 20000; \r\n\r\n// Valid because all are of same type\r\nint phy, che, maths; \r\n\r\n// error because variables of \r\n// different types in same statement\r\nint sal, float tax;\r\n<br></pre><div><br>In C, <strong>variables</strong> can store data belonging to any of the types it recognizes. Hence there are as many number of types of variables as the number of <a href=\"https://www.tutorialspoint.com/cprogramming/c_data_types.htm\">data types in C</a>.<br><br></div><div><strong>Sr.NoType &amp; Description</strong><br>1 | <strong>char</strong>Typically a single octet(one byte). It is an integer type.<br>2 | <strong>int</strong>The most natural size of integer for the machine.<br>3 | <strong>float</strong>A single-precision floating point value.<br>4 | <strong>double</strong>A double-precision floating point value.<br>5 | <strong>void</strong>Represents the absence of type.</div><div><br>C programming language also allows to define various other types of variables such as Enumeration type, <a href=\"https://www.tutorialspoint.com/cprogramming/c_pointers.htm\">Pointer</a> type, <a href=\"https://www.tutorialspoint.com/cprogramming/c_arrays.htm\">Array</a> type, <a href=\"https://www.tutorialspoint.com/cprogramming/c_structures.htm\">Structure</a>type, <a href=\"https://www.tutorialspoint.com/cprogramming/c_unions.htm\">Union</a> type, etc. For this chapter, let us study only basic variable types.<br><br></div><div><br></div><div><a href=\"https://www.tutorialspoint.com/latest/courses?utm_source=tutorialspoint&amp;utm_medium=tutorials_3p&amp;utm_campaign=internal\"><br>Explore our&nbsp;<strong>latest online courses</strong>&nbsp;and learn new skills at your own pace. Enroll and become a certified expert to boost your career.<br></a><br></div><div><br>Variable Definition in C<br><br></div><div><br>A variable definition tells the compiler where and how much storage to create for the variable. A variable definition specifies a data type and contains a list of one or more variables of that type as follows −<br><br></div><pre>type variable_list;\r\n<br></pre><div><br>Here, <strong>type</strong> must be a valid C data type including char, w_char, int, float, double, bool, or any user-defined object; and <strong>variable_list</strong> may consist of one or more identifier names separated by commas.<br><br></div><div><br>Some valid variable declarations are shown here −<br><br></div><pre>int    i, j, k;\r\nchar   c, ch;\r\nfloat  f, salary;\r\ndouble d;\r\n<br></pre><div><br>The line <strong>int i, j, k;</strong> declares and defines the variables i, j, and k; which instruct the compiler to create variables named i, j and k of type <strong>int</strong>.<br><br></div><div><br>Variables can be initialized (assigned an initial value) in their declaration. The initializer consists of an equal sign followed by a constant expression as follows −<br><br></div><pre>type variable_name = value;\r\n<br></pre><div><br>Example: Variable Definition and Initialization<br><br></div><div><br>Take a look at the following examples:<br><br></div><pre>// declaration of d and f\r\nextern int d = 3, f = 5;     \r\n\r\n// definition and initializing d and f\r\nint d = 3, f = 5;            \r\n\r\n// definition and initializes z \r\nbyte z = 22;\r\n\r\n// the variable x has the value \'x\'\r\nchar x = \'x\';               \r\n<br></pre><div><br>For definition without an initializer: variables with static storage duration are implicitly initialized with NULL (all bytes have the value 0); the initial value of all other variables are undefined.<br><br></div><div><br>Variable Declaration in C<br><br></div><div><br>As per the ANSI C standard, all the variables must be declared in the beginning. Variable declaration after the first processing statement is not allowed. Although the C99 and C11 standard revisions have removed this stipulation, it is still considered a good programming practice. You can declare a variable to be assigned a value later in the code, or you can initialize it at the time of declaration.<br><br></div><div><br>Example: Variable Declaration<br><br></div><pre>// declaration with initialization\r\nint x = 10; \r\n\r\n// declare first and assign later       \r\nint y;             \r\ny = 20;\r\n\r\n// define and initialize two variables\r\nint d = 3, f = 5;\r\n\r\n// the variable x has the value \'x\'\r\nchar x = \'x\';      \r\n<br></pre><div><br>Once a variable of a certain type is declared, it cannot be assigned a value of any other type. In such a case the <a href=\"https://www.tutorialspoint.com/compile_c_online.php\">C compiler</a> reports a type mismatch error.<br><br></div><div><br>A variable declaration provides assurance to the compiler that there exists a variable with the given type and name so that the compiler can proceed with further compilation without requiring complete detail about the variable. A variable definition has its meaning at the time of compilation only, the compiler needs actual variable definition at the time of linking the program.<br><br></div><div><br>A variable declaration is useful when you are using multiple files and you define your variable in one of the files which will be available at the time of linking the program. You will use the keyword \"extern\" to declare a variable at any place. Though you can declare a variable multiple times in your C program, it can be defined only once in a file, a function, or a block of code.<br><br></div><div><br>Example<br><br></div><div><br>Try the following example, where variables have been declared at the top, but they have been defined and initialized inside the main function −<br><br></div><div><br></div><div>Open Compiler</div><pre>#include &lt;stdio.h&gt;\r\n\r\n// Variable declaration:\r\nextern int a, b;\r\nextern int c;\r\nextern float f;\r\n\r\nint main () {\r\n\r\n   /* variable definition: */\r\n   int a, b;\r\n   int c;\r\n   float f;\r\n \r\n   /* actual initialization */\r\n   a = 10;\r\n   b = 20;\r\n  \r\n   c = a + b;\r\n   printf(\"value of c : %d \\n\", c);\r\n\r\n   f = 70.0/3.0;\r\n   printf(\"value of f : %f \\n\", f);\r\n \r\n   return 0;\r\n}\r\n<br></pre><div><br>Output<br><br></div><div><br>When the above code is compiled and executed, it produces the following result:<br><br></div><pre>value of c : 30\r\nvalue of f : 23.333334\r\n<br></pre><div><br>The same concept applies on function declaration where you provide a function name at the time of its declaration and its actual definition can be given anywhere else. For example −<br><br></div><pre>// function declaration\r\nint func();\r\n\r\nint main() {\r\n\r\n   // function call\r\n   int i = func();\r\n}\r\n\r\n// function definition\r\nint func() {\r\n   return 0;\r\n}\r\n<br></pre><div><br>Lvalues and Rvalues in C<br><br></div><div><br>There are two kinds of expressions in C:<br><br></div><ul><li>lvalue expressions</li><li>rvalue expressions</li></ul><div><br>Lvalue Expressions in C<br><br></div><div><br>Expressions that refer to a memory location are called \"lvalue\" expressions. An lvalue may appear as either the left-hand or right-hand side of an assignment.<br><br></div><div><br>Variables in C are lvalues and so they may appear on the left-hand side of an assignment.<br><br></div><div><br>Rvalue Expressions in C<br><br></div><div><br>The term \"rvalue\" refers to a data value that is stored at some address in memory. An \"rvalue\" is an expression that cannot have a value assigned to it which means an rvalue may appear on the right-hand side but not on the left-hand side of an assignment.<br><br></div><div><br>Numeric literals are rvalues and so they may not be assigned and cannot appear on the left-hand side.<br><br></div><div><br>Take a look at the following valid and invalid statements:<br><br></div><pre>// valid statement\r\nint g = 20; \r\n\r\n// invalid statement \r\n// it would generate compile-time error\r\n10 = 20;    \r\n<br></pre><div><strong><br>Variables in C</strong> can be classified based on the following parameters:<br><br></div><ul><li><strong>Data types</strong> − int, float, char or struct types.</li><li><a href=\"https://www.tutorialspoint.com/cprogramming/c_scope_rules.htm\"><strong>Scope</strong></a> − global or local variables.</li><li><strong>Storage type</strong> − automatic, static, register or extern.</li></ul><div><br>We shall learn about local and global types and storage types later in this tutorial.<br><br></div>', 1, '2024-10-29 11:41:07', '2024-10-29 11:41:07', NULL),
(10, 'Operators', '<div><br>An <strong>operator</strong> is a symbol that tells the compiler to perform specific mathematical or logical functions. By definition, an <strong>operator</strong> performs a certain operation on operands. An operator needs one or more operands for the operation to be performed.&nbsp;<br><br></div><div><br>Depending on how many operands are required to perform the operation, operands are called as unary, binary or ternary operators. They need one, two or three operands respectively.<br><br></div><ul><li><strong>Unary operators </strong>− ++ (increment), -- (decrement), ! (NOT), ~ (compliment), &amp; (address of), * (dereference)</li><li><strong>Binary operators</strong> − arithmetic, logical and relational operators except !</li><li><strong>Ternary operators</strong> − The ? operator</li></ul><div><br>C language is rich in built-in operators and provides the following types of operators −<br><br></div><ul><li>Arithmetic Operators</li><li>Relational Operators</li><li>Logical Operators</li><li>Bitwise Operators</li><li>Assignment Operators</li><li>Misc Operators</li></ul><div><br>We will, in this chapter, look into the way each operator works. Here, you will get an overview of all these chapters. Thereafter, we have provided independent chapters on each of these operators that contain plenty of examples to show how these operators work in <a href=\"https://www.tutorialspoint.com/cprogramming/index.htm\">C Programming</a>.<br><br></div><div><br>Arithmetic Operators<br><br></div><div><br>We are most familiar with the arithmetic operators. These operators are used to perform arithmetic operations on operands. The most common arithmetic operators are addition (+), subtraction (-), multiplication (*), and division (/).&nbsp;<br><br></div><div><br>In addition, the modulo (%) is an important arithmetic operator that computes the remainder of a division operation. Arithmetic operators are used in forming an arithmetic expression. These operators are binary in nature in the sense they need two operands, and they operate on numeric operands, which may be numeric <a href=\"https://www.tutorialspoint.com/cprogramming/c-literals.htm\">literals</a>, <a href=\"https://www.tutorialspoint.com/cprogramming/c_variables.htm\">variables</a> or expressions.<br><br></div><div><br>For example, take a look at this simple expression −<br><br></div><pre>a + b\r\n<br></pre><div><br>Here \"+\" is an arithmetic operator. We shall learn more about arithmetic operators in C in a subsequent chapter.<br><br></div><div><br>The following table shows all the arithmetic operators supported by the C language. Assume variable <strong>A</strong> holds 10 and variable <strong>B</strong> holds 20 then −<br><br></div><div><a href=\"https://www.tutorialspoint.com/cprogramming/c_arithmetic_operators.htm\"><br>Show Examples<br></a><br></div><div><strong>OperatorDescriptionExample</strong><br>+ | Adds two operands. | A + B = 30<br>− | Subtracts second operand from the first. | A − B = -10<br>* | Multiplies both operands. | A * B = 200<br>/ | Divides numerator by de-numerator. | B / A = 2<br>% | Modulus Operator and remainder of after an integer division. | B % A = 0<br>++ | Increment operator increases the integer value by one. | A++ = 11<br>-- | Decrement operator decreases the integer value by one. | A-- = 9</div><div><br>Relational Operators<br><br></div><div><br>We are also acquainted with relational operators while learning secondary mathematics. These operators are used to compare two operands and return a boolean value (true or false). They are used in a boolean expression.<br><br></div><div><br>The most common relational operators are less than (&lt;), greater than (&gt;), less than or equal to (&lt;=), greater than or equal to (&gt;=), equal to (==), and not equal to (!=). Relational operators are also binary operators, needing two numeric operands.&nbsp;<br><br></div><div><br>For example, in the Boolean expression −<br><br></div><pre>a &gt; b\r\n<br></pre><div><br>Here, \"&gt;\" is a relational operator.<br><br></div><div><br>We shall learn more about with relational operators and their usage in one of the following chapters.<br><br></div><div><a href=\"https://www.tutorialspoint.com/cprogramming/c_relational_operators.htm\"><br>Show Examples<br></a><br></div><div><strong>OperatorDescriptionExample</strong><br>== | Checks if the values of two operands are equal or not. If yes, then the condition becomes true. | (A == B) is not true.&nbsp;<br>!= | Checks if the values of two operands are equal or not. If the values are not equal, then the condition becomes true. | (A != B) is true.<br>&gt; | Checks if the value of left operand is greater than the value of right operand. If yes, then the condition becomes true. | (A &gt; B) is not true.<br>&lt; | Checks if the value of left operand is less than the value of right operand. If yes, then the condition becomes true. | (A &lt; B) is true.<br>&gt;= | Checks if the value of left operand is greater than or equal to the value of right operand. If yes, then the condition becomes true. | (A &gt;= B) is not true.<br>&lt;= | Checks if the value of left operand is less than or equal to the value of right operand. If yes, then the condition becomes true. | (A &lt;= B) is true.</div><div><br></div><div><a href=\"https://www.tutorialspoint.com/latest/courses?utm_source=tutorialspoint&amp;utm_medium=tutorials_3p&amp;utm_campaign=internal\"><br>Explore our&nbsp;<strong>latest online courses</strong>&nbsp;and learn new skills at your own pace. Enroll and become a certified expert to boost your career.<br></a><br></div><div><br>Logical Operators<br><br></div><div><br>These operators are used to combine two or more boolean expressions. We can form a compound Boolean expression by combining Boolean expression with these operators. An example of logical operator is as follows −<br><br></div><pre>a &gt;= 50 &amp;&amp; b &gt;= 50\r\n<br></pre><div><br>The most common logical operators are AND (&amp;&amp;), OR(||), and NOT (!). Logical operators are also binary operators.<br><br></div><div><a href=\"https://www.tutorialspoint.com/cprogramming/c_logical_operators.htm\"><br>Show Examples<br></a><br></div><div><strong>OperatorDescriptionExample</strong><br>&amp;&amp; | Called Logical AND operator. If both the operands are non-zero, then the condition becomes true. | (A &amp;&amp; B) is false.<br>|| | Called Logical OR Operator. If any of the two operands is non-zero, then the condition becomes true. | (A || B) is true.<br>! | Called Logical NOT Operator. It is used to reverse the logical state of its operand. If a condition is true, then Logical NOT operator will make it false. | !(A &amp;&amp; B) is true.</div><div><br>We will discuss more about Logical Operators in C in a subsequent chapter.<br><br></div><div><br>Bitwise Operators<br><br></div><div><br>Bitwise operators let you manipulate data stored in computer’s memory. These operators are used to perform bit-level operations on operands.<br><br></div><div><br>The most common bitwise operators are AND (&amp;), OR (|), XOR (^), NOT (~), left shift (&lt;&lt;), and right shift (&gt;&gt;). Here the \"~\" operator is a unary operator, while most of the other bitwise operators are binary in narure.<br><br></div><div><br>Bitwise operator works on bits and perform bit−by−bit operation. The truth tables for &amp;, \"|\", and \"^\" are as follows −<br><br></div><div><strong>pqp &amp; qp | qp ^ q</strong><br>0 | 0 | 0 | 0 | 0<br>0 | 1 | 0 | 1 | 1<br>1 | 1 | 1 | 1 | 0<br>1 | 0 | 0 | 1 | 1</div><div><br>Assume A = 60 and B = 13 in binary format, they will be as follows −<br><br></div><div><br>A = 0011 1100<br><br></div><div><br>B = 0000 1101<br><br></div><div><br>------------------------<br><br></div><div><br>A&amp;B = 0000 1100<br><br></div><div><br>A|B = 0011 1101<br><br></div><div><br>A^B = 0011 0001<br><br></div><div><br>~A = 1100 0011<br><br></div><div><br>The following table lists the bitwise operators supported by C. Assume variable \'A\' holds 60 and variable \'B\' holds 13, then −<br><br></div><div><a href=\"https://www.tutorialspoint.com/cprogramming/c_bitwise_operators.htm\"><br>Show Examples<br></a><br></div><div><strong>OperatorDescriptionExample</strong><br>&amp; | Binary AND Operator copies a bit to the result if it exists in both operands.&nbsp; | (A &amp; B) = 12, i.e., 0000 1100<br>| | Binary OR Operator copies a bit if it exists in either operand. | (A | B) = 61, i.e., 0011 1101<br>^ | Binary XOR Operator copies the bit if it is set in one operand but not both.&nbsp; | (A ^ B) = 49, i.e., 0011 0001<br>~ | Binary One\'s Complement Operator is unary and has the effect of \'flipping\' bits. | (~A ) = ~(60), i.e,. -0111101<br>&lt;&lt; | Binary Left Shift Operator. The left operands value is moved left by the number of bits specified by the right operand. | A &lt;&lt; 2 = 240 i.e., 1111 0000<br>&gt;&gt; | Binary Right Shift Operator. The left operands value is moved right by the number of bits specified by the right operand. | A &gt;&gt; 2 = 15 i.e., 0000 1111</div><div><br>Assignment Operators<br><br></div><div><br>As the name suggests, an assignment operator \"assigns\" or sets a value to a named variable in C. These operators are used to assign values to variables. The \"=\" symbol is defined as assignment operator in C, however it is not to be confused with its usage in mathematics.&nbsp;<br><br></div><div><br>The following table lists the assignment operators supported by the C language −<br><br></div><div><a href=\"https://www.tutorialspoint.com/cprogramming/c_assignment_operators.htm\"><br>Show Examples<br></a><br></div><div><strong>OperatorDescriptionExample</strong><br>= | Simple assignment operator. Assigns values from right side operands to left side operand | C = A + B will assign the value of A + B to C<br>+= | Add AND assignment operator. It adds the right operand to the left operand and assign the result to the left operand. | C += A is equivalent to C = C + A<br>-= | Subtract AND assignment operator. It subtracts the right operand from the left operand and assigns the result to the left operand. | C -= A is equivalent to C = C - A<br>*= | Multiply AND assignment operator. It multiplies the right operand with the left operand and assigns the result to the left operand. | C *= A is equivalent to C = C * A<br>/= | Divide AND assignment operator. It divides the left operand with the right operand and assigns the result to the left operand. | C /= A is equivalent to C = C / A<br>%= | Modulus AND assignment operator. It takes modulus using two operands and assigns the result to the left operand. | C %= A is equivalent to C = C % A<br>&lt;&lt;= | Left shift AND assignment operator. | C &lt;&lt;= 2 is same as C = C &lt;&lt; 2<br>&gt;&gt;= | Right shift AND assignment operator. | C &gt;&gt;= 2 is same as C = C &gt;&gt; 2<br>&amp;= | Bitwise AND assignment operator. | C &amp;= 2 is same as C = C &amp; 2<br>^= | Bitwise exclusive OR and assignment operator. | C ^= 2 is same as C = C ^ 2<br>|= | Bitwise inclusive OR and assignment operator. | C |= 2 is same as C = C | 2</div><div><br>Hence, the expression \"a = 5\" assigns 5 to the variable \"a\", but \"5 = a\" is an invalid expression in C.<br><br></div><div><br>The \"=\" operator, combined with the other arithmetic, relational and bitwise operators form augmented assignment operators. For example, the += operator is used as add and assign operator. The most common assignment operators are =, +=, -=, *=, /=, %=, &amp;=, |=, and ^=.<br><br></div><div><br>Misc Operators ↦ sizeof &amp; ternary<br><br></div><div><br>Besides the operators discussed above, there are a few other important operators including <strong>sizeof</strong> and <strong>? :</strong> supported by the C Language.<br><br></div><div><a href=\"https://www.tutorialspoint.com/cprogramming/c_sizeof_operator.htm\"><br>Show Examples<br></a><br></div><div><strong>OperatorDescriptionExample</strong><br>sizeof() | Returns the size of a variable. | sizeof(a), where a is integer, will return 4.<br>&amp; | Returns the address of a variable. | &amp;a; returns the actual address of the variable.<br>* | Pointer to a variable. | *a;<br>? : | Conditional Expression. | If Condition is true ? then value X : otherwise value Y</div><div><br>Operators Precedence in C<br><br></div><div><br>Operator precedence determines the grouping of terms in an expression and decides how an expression is evaluated. Certain operators have higher precedence than others; for example, the multiplication operator has a higher precedence than the addition operator.<br><br></div><div><br>For example, x = 7 + 3 * 2; here, x is assigned 13, not 20 because operator * has a higher precedence than +, so it first gets multiplied with 3*2 and then adds into 7.<br><br></div><div><br>Here, operators with the highest precedence appear at the top of the table, those with the lowest appear at the bottom. Within an expression, higher precedence operators will be evaluated first.<br><br></div><div><a href=\"https://www.tutorialspoint.com/cprogramming/c_operators_precedence.htm\"><br>Show Examples<br></a><br></div><div><strong>CategoryOperatorAssociativity</strong><br>Postfix | () [] -&gt; . ++ - - | Left to right<br>Unary | + - ! ~ ++ - - (type)* &amp; sizeof | Right to left<br>Multiplicative | * / % | Left to right<br>Additive | + - | Left to right<br>Shift | &lt;&lt; &gt;&gt; | Left to right<br>Relational | &lt; &lt;= &gt; &gt;= | Left to right<br>Equality | == != | Left to right<br>Bitwise AND | &amp; | Left to right<br>Bitwise XOR | ^ | Left to right<br>Bitwise OR | | | Left to right<br>Logical AND | &amp;&amp; | Left to right<br>Logical OR | || | Left to right<br>Conditional | ?: | Right to left<br>Assignment | = += -= *= /= %=&gt;&gt;= &lt;&lt;= &amp;= ^= |= | Right to left<br>Comma | , | Left to right</div><div><br>Other Operators in C<br><br></div><div><br>Apart from the above, there are a few other operators in C that are not classified into any of the above categories. For example, the increment and decrement operators (++ and --) are unary in nature and can appear as a prefix or postfix to the operand.<br><br></div><div><br>The operators that work with the address of memory location such as the address-of operator (&amp;) and the dereference operator (*). The sizeof operator (sizeof) appears to be a keyword but really an operator.<br><br></div><div><br>C also has the type cast operator (()) that forces the type of an operand to be changed. C also uses the dot (.) and the arrow (-&gt;) symbols as operators when dealing with derived <a href=\"https://www.tutorialspoint.com/cprogramming/c_data_types.htm\">data types</a> such as <a href=\"https://www.tutorialspoint.com/cprogramming/c_structures.htm\">struct</a> and <a href=\"https://www.tutorialspoint.com/cprogramming/c_unions.htm\">union</a>.<br><br></div><div><br>The C99 version of C introduced a few additional operators such as auto, decltype.<br><br></div><div><br>A single expression in C may have multiple operators of different type. The <a href=\"https://www.tutorialspoint.com/compile_c_online.php\">C compiler</a> evaluates its value based on the operator precedence and associativity of operators. For example, in the following expression −<br><br></div><pre>a + b * c\r\n<br></pre><div><br>The multiplication operand takes precedence over the addition operator.<br><br></div><div><br>We shall understand these properties with examples in a subsequent chapter.<br><br></div><div><br>Many other programming languages, which are called C-family languages (such as <a href=\"https://www.tutorialspoint.com/cplusplus/index.htm\">C++</a>, <a href=\"https://www.tutorialspoint.com/csharp/index.htm\">C#</a>, <a href=\"https://www.tutorialspoint.com/java/index.htm\">Java</a>, <a href=\"https://www.tutorialspoint.com/perl/index.htm\">Perl</a> and <a href=\"https://www.tutorialspoint.com/php/index.htm\">PHP</a>) have an operator nomenclature that is similar to C.<br><br></div>', 1, '2024-10-29 11:42:36', '2024-10-29 11:42:36', NULL);
INSERT INTO `topics` (`id`, `title`, `docs`, `skill_id`, `created_at`, `updated_at`, `deleted_at`) VALUES
(11, 'Strings', '<div><br>Strings in C<br><br></div><div><br>A <strong>string in C</strong> is a one-dimensional array of char type, with the last character in the array being a \"null character\" represented by \'\\0\'. Thus, a string in C can be defined as a null-terminated sequence of char type values.<br><br></div><div><br>Creating a String in C<br><br></div><div><br>Let us create a string \"Hello\". It comprises five char values. In C, the literal representation of a char type uses single quote symbols − such as \'H\'. These five alphabets put inside single quotes, followed by a null character represented by \'\\0\' are assigned to an array of char types. The size of the array is five characters plus the null character − six.<br><br></div><div><br>Example<br><br></div><pre>char greeting[6] = {\'H\', \'e\', \'l\', \'l\', \'o\', \'\\0\'};\r\n<br></pre><div><br></div><div><a href=\"https://www.tutorialspoint.com/latest/courses?utm_source=tutorialspoint&amp;utm_medium=tutorials_3p&amp;utm_campaign=internal\"><br>Explore our&nbsp;<strong>latest online courses</strong>&nbsp;and learn new skills at your own pace. Enroll and become a certified expert to boost your career.<br></a><br></div><div><br>Initializing String Without Specifying Size<br><br></div><div><br>C lets you initialize an array without declaring the size, in which case the compiler automatically determines the array size.<br><br></div><div><br>Example<br><br></div><pre>char greeting[] = {\'H\', \'e\', \'l\', \'l\', \'o\', \'\\0\'};\r\n<br></pre><div><br>The array created in the memory can be schematically shown as follows −<figure data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;height&quot;:191,&quot;url&quot;:&quot;https://www.tutorialspoint.com/cprogramming/images/string_representation.jpg&quot;,&quot;width&quot;:560}\" data-trix-content-type=\"image\" class=\"attachment attachment--preview\"><img src=\"https://www.tutorialspoint.com/cprogramming/images/string_representation.jpg\" width=\"560\" height=\"191\"><figcaption class=\"attachment__caption\"></figcaption></figure><br><br></div><div><br>If the string is not terminated by \"\\0\", it results in unpredictable behavior.&nbsp;<br><br></div><div><strong><br>Note:</strong> The length of the string doesn’t include the null character. The library function <a href=\"https://www.tutorialspoint.com/c_standard_library/c_function_strlen.htm\">strlen()</a> returns the length of this string as 5.<br><br></div><div><br>Loop Through a String<br><br></div><div><br>You can loop through a string (character array) to access and manipulate each character of the string using the <a href=\"https://www.tutorialspoint.com/cprogramming/c_for_loop.htm\">for loop</a> or any other <a href=\"https://www.tutorialspoint.com/cprogramming/c_loops.htm\">loop statements</a>.<br><br></div><div><br>Example<br><br></div><div><br>In the following example, we are printing the characters of the string.<br><br></div><div><br></div><div>Open Compiler</div><pre>#include &lt;stdio.h&gt;\r\n#include &lt;string.h&gt;\r\n\r\nint main (){\r\n\r\n   char greeting[] = {\'H\', \'e\', \'l\', \'l\', \'o\', \'\\0\'};\r\n\r\n   for (int i = 0; i &lt; 5; i++) {\r\n      printf(\"%c\", greeting[i]);\r\n   }\r\n\r\n   return 0;\r\n}\r\n<br></pre><div><br>Output<br><br></div><div><br>It will produce the following output −<br><br></div><pre>Hello\r\n<br></pre><div><br>Printing a String (Using %s Format Specifier)<br><br></div><div><br>C provides a format specifier \"<strong>%s</strong>\" which is used to print a string when you\'re using functions like <a href=\"https://www.tutorialspoint.com/c_standard_library/c_function_printf.htm\"><strong>printf()</strong></a> or <a href=\"https://www.tutorialspoint.com/c_standard_library/c_function_fprintf.htm\"><strong>fprintf()</strong></a> functions.<br><br></div><div><br>Example<br><br></div><div><br>The \"%s\" specifier tells the function to iterate through the array, until it encounters the null terminator (\\0) and printing each character. This effectively prints the entire string represented by the character array without having to use a loop.<br><br></div><div><br></div><div>Open Compiler</div><pre>#include &lt;stdio.h&gt;\r\n\r\nint main (){\r\n\r\n   char greeting[] = {\'H\', \'e\', \'l\', \'l\', \'o\', \'\\0\'};\r\n   printf(\"Greeting message: %s\\n\", greeting );\r\n\r\n   return 0;\r\n}\r\n<br></pre><div><br>Output<br><br></div><div><br>It will produce the following output −<br><br></div><pre>Greeting message: Hello\r\n<br></pre><div><br>You can declare an oversized array and assign less number of characters, to which the <a href=\"https://www.tutorialspoint.com/compile_c_online.php\">C compiler</a> has no issues. However, if the size is less than the characters in the initialization, you may get garbage values in the output.<br><br></div><pre>char greeting[3] = {\'H\', \'e\', \'l\', \'l\', \'o\', \'\\0\'};\r\nprintf(\"%s\", greeting);\r\n<br></pre><div><br>Constructing a String using Double Quotes<br><br></div><div><br>Instead of constructing a char array of individual char values in single quotation marks, and using \"\\0\" as the last element, C lets you construct a string by enclosing the characters within double quotation marks. This method of initializing a string is more convenient, as the compiler automatically adds \"\\0\" as the last character.<br><br></div><div><br>Example<br><br></div><div><br></div><div>Open Compiler</div><pre>#include &lt;stdio.h&gt;\r\n\r\nint main() {\r\n  // Creating string\r\n  char greeting[] = \"Hello World\";\r\n\r\n  // Printing string\r\n  printf(\"%s\\n\", greeting);\r\n\r\n  return 0;\r\n}\r\n<br></pre><div><br>Output<br><br></div><div><br>It will produce the following output −<br><br></div><pre>Hello World\r\n<br></pre><div><br>String Input Using scanf()<br><br></div><div><br>Declaring a null-terminated string causes difficulty if you want to ask the user to input a string. You can accept one character at a time to store in each subscript of an array, with the help of a for loop −<br><br></div><div><br>Syntax<br><br></div><pre>for(i = 0; i &lt; 6; i++){\r\n   scanf(\"%c\", &amp;greeting[i]);\r\n}\r\ngreeting[i] = \'\\0\';\r\n<br></pre><div><br>Example<br><br></div><div><br>In the following example, you can input a string using <a href=\"https://www.tutorialspoint.com/c_standard_library/c_function_scanf.htm\">scanf() function</a>, after inputting the specific characters (5 in the following example), we are assigning null (<strong>\'\\0\'</strong>) to terminate the string.<br><br></div><pre>printf(\"Starting typing... \");\r\n\r\nfor (i = 0; i &lt; 5; i++) {\r\n  scanf(\"%c\", &amp;greeting[i]);\r\n}\r\n\r\n// Assign NULL manually\r\ngreeting[i] = \'\\0\';\r\n\r\n// Printing the string\r\nprintf(\"Value of greeting: %s\\n\", greeting);\r\n<br></pre><div><br>Output<br><br></div><div><br>Run the code and check its output −<br><br></div><pre>Starting typing... Hello\r\nValue of greeting: Hello\r\n<br></pre><div><br>Example<br><br></div><div><br>It is not possible to input \"\\0\" (the null string) because it is a non-printable character. To overcome this, the \"%s\" format specifier is used in the scanf() statement −<br><br></div><div><br></div><div>Open Compiler</div><pre>#include &lt;stdio.h&gt;\r\n#include &lt;string.h&gt;\r\n\r\nint main (){\r\n\r\n   char greeting[10];\r\n\r\n   printf(\"Enter a string:\\n\");\r\n   scanf(\"%s\", greeting);\r\n\r\n   printf(\"You entered: \\n\");\r\n   printf(\"%s\", greeting);\r\n\r\n   return 0;\r\n}\r\n<br></pre><div><br>Output<br><br></div><div><br>Run the code and check its output −<br><br></div><pre>Enter a string:\r\nHello\r\nYou entered:\r\nHello\r\n<br></pre><div><strong><br>Note:</strong> If the size of the array is less than the length of the input string, then it may result in situations such as garbage, data corruption, etc.<br><br></div><div><br>String Input with Whitespace<br><br></div><div><strong><br>scanf(\"%s\")</strong> reads characters until it encounters a whitespace (space, tab, newline, etc.) or EOF. So, if you try to input a string with multiple words (separated by whitespaces), then the C program would accept characters before the first whitespace as the input to the string.<br><br></div><div><br>Example<br><br></div><div><br>Take a look at the following example −<br><br></div><div><br></div><div>Open Compiler</div><pre>#include &lt;stdio.h&gt;\r\n#include &lt;string.h&gt;\r\n\r\nint main (){\r\n\r\n   char greeting[20];\r\n\r\n   printf(\"Enter a string:\\n\");\r\n   scanf(\"%s\", greeting);\r\n\r\n   printf(\"You entered: \\n\");\r\n   printf(\"%s\", greeting);\r\n\r\n   return 0;\r\n}\r\n<br></pre><div><br>Output<br><br></div><div><br>Run the code and check its output −<br><br></div><pre>Enter a string:\r\nHello World!\r\n\r\nYou entered:\r\nHello\r\n<br></pre><div><br>String Input Using gets() and fgets() Functions<br><br></div><div><br>To accept a string input with whitespaces in between, we should use the <a href=\"https://www.tutorialspoint.com/c_standard_library/c_function_gets.htm\">gets() function</a>. It is called an unformatted console input function, defined in the <a href=\"https://www.tutorialspoint.com/c_standard_library/stdio_h.htm\">\"stdio.h\" header file</a>.<br><br></div><div><br>Example: String Input Using gets() Function<br><br></div><div><br>Take a look at the following example −<br><br></div><div><br></div><div>Open Compiler</div><pre>#include &lt;stdio.h&gt;\r\n#include &lt;string.h&gt;\r\n\r\nint main(){\r\n\r\n   char name[20];\r\n\r\n   printf(\"Enter a name:\\n\");\r\n   gets(name);\r\n\r\n   printf(\"You entered: \\n\");\r\n   printf(\"%s\", name);\r\n\r\n   return 0;\r\n}\r\n<br></pre><div><br>Output<br><br></div><div><br>Run the code and check its output −<br><br></div><pre>Enter a name:\r\nSachin Tendulkar\r\n\r\nYou entered: \r\nSachin Tendulkar\r\n<br></pre><div><br>In newer versions of C, gets() has been deprecated. It is potentially a dangerous function because it doesn’t perform bound checks and may result in buffer overflow.<br><br></div><div><br>Instead, it is advised to use the <strong>fgets()</strong> function.<br><br></div><pre>fgets(char arr[], size, stream);\r\n<br></pre><div><br>The <a href=\"https://www.tutorialspoint.com/c_standard_library/c_function_fgets.htm\">fgets() function</a> can be used to accept input from any input stream, such as stdin (keyboard) or FILE (file stream).<br><br></div><div><br>Example: String Input Using fgets() Function<br><br></div><div><br>The following program uses fgets() and accepts multiword input from the user.<br><br></div><div><br></div><div>Open Compiler</div><pre>#include &lt;stdio.h&gt;\r\n#include &lt;string.h&gt;\r\n\r\nint main(){\r\n\r\n   char name[20];\r\n\r\n   printf(\"Enter a name:\\n\");\r\n   fgets(name, sizeof(name), stdin);\r\n\r\n   printf(\"You entered: \\n\");\r\n   printf(\"%s\", name);\r\n\r\n   return 0;\r\n}\r\n<br></pre><div><br>Output<br><br></div><div><br>Run the code and check its output −<br><br></div><pre>Enter a name:\r\nVirat Kohli\r\n\r\nYou entered: \r\nVirat Kohli\r\n<br></pre><div><br>Example: String Input Using scanf(\"%[^\\n]s\")<br><br></div><div><br>You may also use <strong>scanf(\"%[^\\n]s\")</strong> as an alternative. It reads the characters until a newline character (\"\\n\") is encountered.<br><br></div><div><br></div><div>Open Compiler</div><pre>#include &lt;stdio.h&gt;\r\n#include &lt;string.h&gt;\r\n\r\nint main (){\r\n\r\n   char name[20];\r\n\r\n   printf(\"Enter a name: \\n\");\r\n   scanf(\"%[^\\n]s\", name);\r\n\r\n   printf(\"You entered \\n\");\r\n   printf(\"%s\", name);\r\n\r\n   return 0;\r\n}\r\n<br></pre><div><br>Output<br><br></div><div><br>Run the code and check its output −<br><br></div><pre>Enter a name: \r\nZaheer Khan\r\n\r\nYou entered \r\nZaheer Khan\r\n<br></pre><div><br>Printing String Using puts() and fputs() Functions<br><br></div><div><br>We have been using <a href=\"https://www.tutorialspoint.com/c_standard_library/c_function_printf.htm\">printf() function</a> with %s specifier to print a string. We can also use <a href=\"https://www.tutorialspoint.com/c_standard_library/c_function_puts.htm\">puts() function</a> (deprecated in C11 and C17 versions) or <a href=\"https://www.tutorialspoint.com/c_standard_library/c_function_fputs.htm\">fputs() function</a> as an alternative.<br><br></div><div><br>Example<br><br></div><div><br>Take a look at the following example −<br><br></div><div><br></div><div>Open Compiler</div><pre>#include &lt;stdio.h&gt;\r\n#include &lt;string.h&gt;\r\n\r\nint main (){\r\n\r\n   char name[20] = \"Rakesh Sharma\";\r\n\r\n   printf(\"With puts(): \\n\");\r\n   puts(name);\r\n\r\n   printf(\"With fputs(): \\n\");\r\n   fputs(name, stdout);\r\n\r\n   return 0;\r\n}\r\n<br></pre><div><br>Output<br><br></div><div><br>Run the code and check its output −<br><br></div><pre>With puts(): \r\nHarbhajan Singh\r\n\r\nWith fputs(): \r\nHarbhajan Singh</pre>', 1, '2024-10-29 11:44:37', '2024-10-29 11:44:37', NULL),
(12, 'Introduction', '<div><br>Before we begin, let\'s be frank to ourselves − there is no magic formula that will work for all who want to speak fluently in a non-native language, because every person has different levels of understanding and learning speeds curve. Just as some learn to play basketball better and quicker than others, different people learn to speak a language depending on their individual learning aptitude.<br><br></div><div><br>It is quite a demanding task to learn and speak a non-native language fluently. This tutorial is meant for those readers who learn English as their second language. It provides sufficient information on how non-native English speakers can spot and rectify the errors they commit inadvertently while speaking in English.<br><br></div><div><br>English Grammar vs. Spoken English<br><br></div><div><br>A person stands to learn English quicker if he stresses more on the spoken side of it, as compared to the grammatical side. Constant speaking and listening to correct usage will incorporate the right rules of grammar in his brain. This doesn\'t mean that Grammar can be neglected.<figure data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;height&quot;:400,&quot;url&quot;:&quot;https://www.tutorialspoint.com/spoken_english_errors/images/english_grammar_vs_spoken_english.jpg&quot;,&quot;width&quot;:600}\" data-trix-content-type=\"image\" class=\"attachment attachment--preview\"><img src=\"https://www.tutorialspoint.com/spoken_english_errors/images/english_grammar_vs_spoken_english.jpg\" width=\"600\" height=\"400\"><figcaption class=\"attachment__caption\"></figcaption></figure><br><br></div><div><br>A conversation becomes more meaningful with the right usage of grammar, but as with anything new, stress should be more on practicing what you have learnt many times first, before moving on to something more complex. Similarly, beginners should stress on speaking what they have learnt first, before moving on to grammar and more technical stuff.<br><br></div><div><br>A Brief History of Speech<br><br></div><div><br>In the 20th century, a lot of people had a common opinion that individuals learn the art of conversing during their childhood by observing people around them and imitating them.<br><br></div><div><br>However, this theory was later discarded, as it couldn\'t explain the structural and grammatical mistakes children did when they spoke specific sentences. For example, a child might say − <strong>\"food give you me.\"</strong> in a family where no one would ever say that line. This means that even at such a tender age, a child\'s mind starts processing and creating new rules in speech.<figure data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;height&quot;:479,&quot;url&quot;:&quot;https://www.tutorialspoint.com/spoken_english_errors/images/speech.jpg&quot;,&quot;width&quot;:716}\" data-trix-content-type=\"image\" class=\"attachment attachment--preview\"><img src=\"https://www.tutorialspoint.com/spoken_english_errors/images/speech.jpg\" width=\"716\" height=\"479\"><figcaption class=\"attachment__caption\"></figcaption></figure><br><br></div><div><br>While language competency is inherited, the languages themselves are transmitted via learning.<br><br></div>', 2, '2024-10-29 13:30:44', '2024-10-29 13:30:44', NULL),
(13, 'Identifier Language Barrier', '<div><br>Non-native speakers find it difficult to speak just what they really want; sometimes they even struggle to obtain basic information concerning products or services while communicating.<br><br></div><div><br>Teachers frequently complain about non-native speakers\' lack of critical thinking. Sometimes they feel that students are lost or confused but the problem lies in the student’s ability (or rather inability) to communicate effectively.<figure data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;height&quot;:477,&quot;url&quot;:&quot;https://www.tutorialspoint.com/spoken_english_errors/images/language_barriers.jpg&quot;,&quot;width&quot;:716}\" data-trix-content-type=\"image\" class=\"attachment attachment--preview\"><img src=\"https://www.tutorialspoint.com/spoken_english_errors/images/language_barriers.jpg\" width=\"716\" height=\"477\"><figcaption class=\"attachment__caption\"></figcaption></figure><br><br></div><div><br>What Stops Us?<br><br></div><div><br>Different speakers have different motives behind learning English − some learn it to clear their examination papers, while some to get job offers, and there are some who learn English simply because they love the language.<br><br></div><div><br>It\'s still debatable if motivation yields success or it\'s the other way round, but English can only be learnt out of the love to be able to hold a meaningful conversation in it.<br><br></div><div><br>Limitations of Grammar<br><br></div><div><br>People interested in improving their Spoken English need to understand that learning the rules and usages of English Grammar does not improve their chances of speaking the language, but confuses them and discourages their speaking.<br><br></div><div><br>Spoken English can be only enhanced by repeated listening to correct usage, constantly speaking the language with audiences with different levels of aptitudes in speech, and learning grammar rules and usages simultaneously.<br><br></div>', 2, '2024-10-29 13:32:14', '2024-10-29 13:32:14', NULL),
(14, 'Four Rules of Learning', '<div><br>Rules are important because they set the guidelines to what is acceptable and what is not. Here, in this chapter, we will discuss the four rules of learning.<br><br></div><div><br>Speaking, Thinking, Practicing &amp; Checking<br><br></div><div><br>Many suggest that continuous practice is the key to fluent Spoken English, however, studies have found that only practicing doesn\'t necessarily guarantee results.<br><br></div><div><br>The best way to learn how to speak in English is listening to large volumes of audio input, learning its grammatical structure and vocabulary, and then using the knowledge you have gained on a target audience.<br><br></div><div><br>Speak the language aloud<br><br></div><div><br>Traditional Spoken English training methods take a very long time to yield results, if at all, because the stress is more on reading and writing, however, speaking a language needs a lot of interaction with a target audience who can provide direct feedback and also suggest improvements to your speech.<br><br></div><div><br>Think in the target language<br><br></div><div><br>Most of us have a faulty technique of thinking about a sentence in our native language and then translating it in our head into English before finally speaking it out. You need to remember that speaking, in itself, is an extremely tricky and complex exercise involving a huge part of our brain, throat and tongue muscles and wind flow. Adding mental translation to the already complex task leads to errors like abrupt pauses and fillers in speaking. Thinking in the target language is a major decision which has to be taken by the individual<br><br></div><div><br>Speak in the language whenever possible<br><br></div><div><br>Any language comes with its own set of sounds, phonetics, wind flow that makes pronunciation of words and sounds in that language very different from the way we speak in our native language. To master these variations in sounds and speech, one needs immense practice of the correctly pronounced sounds.<br><br></div><div><br>Never repeat this mistake<br><br></div><div><br>There\'s a misconception that while speaking English, a person should be encouraged to just speak in the language, without any stress on proper pronunciation or grammar sense. This, in reality, adversely affects a person\'s learning as speaking incorrect English is actually forming a bad habit of incorrect English. The right way is to train the speakers on basic grammar skills and guide them to create simple sentences using appropriate grammar.<br><br></div>', 2, '2024-10-29 13:33:24', '2024-10-29 13:33:24', NULL),
(15, 'Pronunciation of Vowels', '<div><br>The Connecting Sounds<br><br></div><div><br>Vowels help us in distinguishing one word from another. Needless to say, when you are not fluent with the vowel sounds, your speech sounds confusing and vague.<br><br></div><div><br>There are no straightforward answers to the question of which language has more vowels, since that entirely depends on how they are counted. However, in the following activity, we have tried to list the most common variations on vowels in English. You are requested to read the words aloud to understand the difference in pronunciation vowels bring in words with almost identical spellings.<br><br></div><div><br>Practicing Vowel Sounds-I<br><br></div><div><strong><br>[I:] As In TREE:<br></strong><br></div><ul><li>Equal – Even – Evening – Evil – Recent – Region</li><li>Sea – Tea – Team – Cream – Clean – Lead – Read</li></ul><div><strong><br>[I] As In NEAR<br></strong><br></div><ul><li>Fear – Hear – Ear – Near – Clear – Rear</li></ul><div><strong><br>[I] As In BIT<br></strong><br></div><ul><li>Hit – Him – His – Is – It – Fit – Did</li><li>Cabin – Habit – Unit – Justice – Public</li></ul><div><strong><br>[E] As In BED<br></strong><br></div><ul><li>Red – Bed – Bet – Let – Met – Set – Sell</li><li>Embrace – Employ – Engage – Enjoy – Enlarge</li></ul><div><strong><br>[E] As In FARE<br></strong><br></div><ul><li>Care – Dare – Bare – Rare – Share – Spare – Scare</li><li>Fair – Hair – Air – Affair – Pair – Repair – Despair</li></ul><div><br></div><div><a href=\"https://www.tutorialspoint.com/latest/courses?utm_source=tutorialspoint&amp;utm_medium=tutorials_3p&amp;utm_campaign=internal\"><br>Explore our&nbsp;<strong>latest online courses</strong>&nbsp;and learn new skills at your own pace. Enroll and become a certified expert to boost your career.<br></a><br></div><div><br>Practicing Vowel Sounds-II<br><br></div><div><strong><br>[Æ] As In BAT<br></strong><br></div><ul><li>Land – Hand – Sand – Stand – Command – Demand</li><li>Dance – Chance – Glance – Fancy – Answer – Dancer</li></ul><div><strong><br>[A:] As In TAR<br></strong><br></div><ul><li>Car – Card – Hard – Are – Far – Bar – Garden</li><li>Mirage – Garage – Massage – Facade – Ensemble</li></ul><div><strong><br>[O:] As In SHORE<br></strong><br></div><ul><li>Core – More – Bore – Before – Shore – Sore – Store</li><li>Boring – Story – Sorry – Borrow – Sorrow – Tomorrow</li></ul><div><strong><br>[O] As In HOT<br></strong><br></div><ul><li>Hot – Lot – Not – Got – Forgot – Forgotten – Bottle</li><li>College – Dollar – Tom – Bomb – Comment – Compliment</li></ul><div><strong><br>[U:] As In RULER<br></strong><br></div><ul><li>Rude – Rule – Rumor – Brutal – Lucy – June – Junior</li><li>Food – Cool – School – Fool – Foolish – Pool – Tool</li></ul><div><strong><br>[U:] Or [U]<br></strong><br></div><ul><li>Room – Broom – Roof – Root – Soot – Hoof – Coop – Boulevard</li></ul><div><strong><br>[Yu:] As In USER<br></strong><br></div><ul><li>Use – Useful – Union – Unit – Unite – Unique – University</li><li>Fuse – Refuse – Future – Cute – Cube – Huge – Humor – Human</li></ul><div><strong><br>[U:] Or [Yu:] As In TUMOR<br></strong><br></div><ul><li>Tune – Tulip – Tumor – Student – Studio – Stupid</li><li>New – Newspaper – Nude – Nuclear – Numeral – Nutrition</li></ul><div><strong><br>[U] As In BOOK<br></strong><br></div><ul><li>Book – Cook – Hook – Look – Shook – Took – Good – Hood</li><li>Put – Push – Pull – Full – Bull – Bullet – Bush – Butcher</li></ul><div><strong><br>[Ər] As In SIR<br></strong><br></div><ul><li>Her – Herb – Verb – Serve – Perfect – Person – Certain</li><li>Mister – Cover – Buyer – Better – Teacher – Finger</li></ul><div><strong><br>[Ə] As In BUT<br></strong><br></div><ul><li>But – Nut – Fun – Sun – Dull – Lucky – Ugly – Suddenly</li><li>Correct – Collect – Contain – Memory – History – Freedom</li></ul>', 2, '2024-10-29 13:34:44', '2024-10-29 13:34:44', NULL),
(16, 'Reading Exercise', '<div><br>Content-Speech Disagreement-I<br><br></div><div><br>Please read the following paragraph in your mind first −<br><br></div><div><strong><br>\"There was a time when the Software Industry was just warming up, and the government needed to allot space to the multinational companies, who aggressively lobbied for larger territories to expand their office premise.\"<br></strong><br></div><div><br>Note that, it was very easy to go through the entire paragraph without any issues. However, I’m sure many of you could have speed-read through it.<br><br></div><div><br>Content-Speech Disagreement-II<br><br></div><div><br>Now, let\'s try reading the same paragraph as you would read something aloud, but only by moving your lips and not uttering any sound −<br><br></div><div><strong><br>\"There was a time when the Software Industry was just warming up, and the government needed to allot space to the multinational companies, who aggressively lobbied for larger territories to expand their office premise.\"<br></strong><br></div><div><strong><br>Did you notice any difference in the way your brain functions in both the cases?<br></strong><br></div><div><br>Human brain is trained to accept running text as just information, hence the level of mental exercise is minimum. However, when we try reading it aloud, different factors which are listed below will start coming to our mind which increases brain activity<br><br></div><ul><li>Pronunciation</li><li>Speech</li><li>Breath</li><li>Wind manipulation<figure data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;height&quot;:475,&quot;url&quot;:&quot;https://www.tutorialspoint.com/spoken_english_errors/images/reading_exercises.jpg&quot;,&quot;width&quot;:716}\" data-trix-content-type=\"image\" class=\"attachment attachment--preview\"><img src=\"https://www.tutorialspoint.com/spoken_english_errors/images/reading_exercises.jpg\" width=\"716\" height=\"475\"><figcaption class=\"attachment__caption\"></figcaption></figure></li></ul><div><br>This is the reason why many experts state the traditional method of book-reading <strong>as a complete waste of time,</strong> unless it includes exercises where people are encouraged to read from text and speak it aloud, at times at top volumes.<br><br></div>', 2, '2024-10-29 13:36:23', '2024-10-29 13:36:23', NULL),
(17, 'Types of Spoken English', '<div><br>Slangs consist of a vocabulary of non-standard words and phrases in a given language. Its use implies that the user is familiar with whatever is referred to, or with a group of people who are familiar with it and use the term.<br><br></div><div><br>Variations in Spoken English<br><br></div><div><br>Different people will need different levels of accuracy and fluency in Spoken English, depending on the professions they are in. Let’s discuss the different levels here −<br><br></div><div><br>Professional Spoken English<br><br></div><div><br>This type of language is used by professionals from specific industries. The speech used here is highly technical, with stress put on facts, figures, data and industry jargons.<br><br></div><div><strong><br>Example<br></strong><br></div><div><strong><br>Mary</strong> − \"How is your day going?\"<br><br></div><div><strong><br>John</strong> − \"Very busy. I\'m preparing a detailed presentation on marketing strategy and competitor analysis which would be presented to the client. I\'m not even half done yet.\"<br><br></div><div><strong><br>Mary</strong> − \"You must feel anxious out now.\"<br><br></div><div><strong><br>John</strong> − \"Of course, that’s an understatement.\"<br><br></div><div><br>Literary Spoken English<br><br></div><div><br>This is the language used in magazines and newspapers. The stress is more on communicating with a large section of the crowd. The speech follows all rules of grammar and yet, the words used are simple and common.<br><br></div><div><strong><br>Example<br></strong><br></div><div><br>Clive Staples Lewis, commonly known as C. S. Lewis (29 November 1898 – 22 November 1963), was a novelist, poet, academic, medievalist, literary critic, essayist, lay theologian, broadcaster, lecturer, and Christian apologist. Born in Belfast, Ireland, he held academic positions at both Oxford University (Magdalen College), 1925–54, and Cambridge University (Magdalene College), 1954–63. He is best known for his fictional work, especially The Screw tape Letters, The Chronicles of Narnia, and The Space Trilogy, and for his non-fiction Christian apologetics, such as Mere Christianity, Miracles, and The Problem of Pain.<br><br></div><div><br>Conversational Spoken English<br><br></div><div><br>This English is the more widely used in daily conversation, where rules of grammar are more relaxed, stress is more on just getting the message across. Sentences might be dropped half-way on realizing that the listener has gotten the message.<br><br></div><div><strong><br>Example<br></strong><br></div><div><strong><br>Situation</strong> − The conversation is between an employee who works with an interior designing store and a client.<br><br></div><div><strong><br>Receptionist</strong> − “Good Afternoon. This is EFX Interior Designer Store. How may I help you today?”<br><br></div><div><strong><br>Mohan</strong> − “Hi. I am Mohan. I wanted to get a custom-made interior decoration done for my house. Could I please speak to someone?”<br><br></div><div><strong><br>Receptionist</strong> − “Sure Sir. Just hold on for a second or two.”<br><br></div><div><strong><br>Mohan</strong> − “Okay. Sure.”<br><br></div><div><br>After a while…<br><br></div><div><strong><br>Raj</strong> − “Hey. This is Raj. How can I assist you?”<br><br></div><div><strong><br>Mohan</strong> − “Hi Raj, I’ve heard a lot about your Interior designing company. Could you provide me some samples of your work? I am looking for a trendy and aesthetically looking interiors for my newly built house.<br><br></div><div><strong><br>Raj</strong> − “Well, Mohan. You’ve approached the right place. I will be more than glad to help. Though you will have to provide some more details that you are looking at.”<br><br></div><div><strong><br>Mohan</strong> − “Raj, I am actually looking for a colourful theme for each room along with some lighting variations on the ceiling”<br><br></div><div><strong><br>Raj</strong> − “Sounds interesting! Any colour in particular?”<br><br></div><div><strong><br>Mohan</strong> − “Yes, actually. I am hovering over two colours. One being light blue and one being sunset orange.”<br><br></div><div><strong><br>Raj</strong> − “Perfect! Though Mohan, I will require you to visit my store at the earliest.”<br><br></div><div><strong><br>Mohan</strong> − “That will be good. Can I drop by on the coming Sunday?”<br><br></div><div><strong><br>Raj</strong> − “Great! Sunday, around 4. Also, by the time you are here, I will assemble some samples in the two colours mentioned by you along with some of my printed designs that display the pattern you’ve got in mind.”<br><br></div><div><strong><br>Mohan</strong> − “Perfect. Thanks a lot. It’s quite a relief frankly. See you soon.”<br><br></div><div><strong><br>Raj</strong> − “You’re welcome Mohan. Bye.”<br><br></div><div><br>Slang, Ethnic, and Vulgar English<br><br></div><div><br>Every language comes with a set of words that have multiple meanings, and depending upon the situation in which you use them, multiple interpretations as well. These words are called slangs, and are native to a particular region.<br><br></div><div><br>Certain words might not be strictly off-limits in a society, but could be highly offensive to a particular community. These ethnic slangs and vulgar words find their way into the slang talk. Close friends use this mode for communication while having a friendly, informal conversation. In addition to this, the pronunciation of certain words changes with different regions which might cause confusion in speech.<br><br></div><div>Print Page</div><div>Previous</div><div><br><br></div>', 2, '2024-10-29 13:37:53', '2024-10-29 13:37:53', NULL),
(18, 'Introduction', '<div><br>This tutorial will teach you how to write a simple <strong>Hello World</strong> program using Python Programming language. This program will make use of Python built-in <strong>print()</strong> function to print the string.<br><br></div><div><br>Hello World Program in Python<br><br></div><div><br>Printing <strong>\"Hello World\"</strong> is the first program in Python. This program will not take any user input, it will just print text on the output screen. It is used to test if the software needed to compile and run the program has been installed correctly.<br><br></div><div><br>Steps<br><br></div><div><br>The following are the steps to write a Python program to print Hello World –<br><br></div><ul><li>Step 1: Install Python. Make sure that Python is installed on your system or not. If Python is not installed, then install it from here: <a href=\"https://www.python.org/downloads/\">https://www.python.org/downloads/</a></li><li>Step 2: Choose Text Editor or IDE to write the code.</li><li>Step 3: Open Text Editor or IDE, create a new file, and write the code to print Hello World.</li><li>Step 4: Save the file with a file name and extension \".py\".</li><li>Step 5: Compile/Run the program.</li></ul><div><br></div><div><a href=\"https://www.tutorialspoint.com/certification/complete-python-prime-pack/index.asp?utm_source=tutorialspoint&amp;utm_medium=python_tutorial_3p&amp;utm_campaign=internal\"><br>Learn&nbsp;<strong>Python</strong>&nbsp;in-depth with real-world projects through our&nbsp;<strong>Python certification course</strong>. Enroll and become a certified expert to boost your career.<br></a><br></div><div><br>Python Program to Print Hello World<br><br></div><pre># Python code to print \"Hello World\"\r\nprint (\"Hello World\")\r\n<br></pre><div><br>In the above code, we wrote two lines. The first line is the <a href=\"https://www.tutorialspoint.com/python/python_comments.htm\">Python comment</a> that will be ignored by the <a href=\"https://www.tutorialspoint.com/online_python_compiler.php\">Python interpreter</a>, and the second line is the <strong>print()</strong> statement that will print the given message (\"Hello World\") on the output screen.<br><br></div><div><strong><br>Output<br></strong><br></div><pre>Hello World\r\n<br></pre><div><br>Different Ways to Write and Execute Hello World Program<br><br></div><div><br>Using Python Interpreter Command Prompt Mode<br><br></div><div><br>It is very easy to display the <strong>Hello World</strong> message using the Python interpreter. Launch the Python interpreter from a command terminal of your Windows Operating System and issue the <strong>print statement</strong> from the Python prompt as follows −<br><br></div><div><br>Example<br><br></div><pre>PS C:\\&gt; python\r\nPython 3.11.2 (tags/v3.11.2:878ead1, Feb 7 2023, 16:38:35) [MSC v.1934 64 bit (AMD64)] on win32\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n\r\n&gt;&gt;&gt; print (\"Hello World\")\r\nHello World\r\n<br></pre><div><br>Similarly, Hello World message is printed on Linux System.<br><br></div><div><br>Example<br><br></div><pre>$ python3\r\nPython 3.10.6 (main, Mar 10 2023, 10:55:28) [GCC 11.3.0] on linux\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n\r\n&gt;&gt;&gt; print (\"Hello World\")\r\nHello World\r\n<br></pre><div><br>Using Python Interpreter Script Mode<br><br></div><div><br>Python interpreter also works in scripted mode. Open any text editor, enter the following text and save as Hello.py<br><br></div><pre>print (\"Hello World\")\r\n<br></pre><div><br>For Windows OS, open the command prompt terminal (CMD) and run the program as shown below −<br><br></div><pre>C:\\&gt;python hello.py\r\n<br></pre><div><br>This will display the following output<br><br></div><pre>Hello World\r\n<br></pre><div><br>To run the program from Linux terminal<br><br></div><pre>$ python3 hello.py\r\n<br></pre><div><br>This will display the following output<br><br></div><pre>Hello World\r\n<br></pre><div><br>Using Shebang #! in Linux Scripts<br><br></div><div><br>In Linux, you can convert a Python program into a self executable script. The first statement in the code should be a shebang <strong>#!</strong>. It must contain the path to Python executable. In Linux, Python is installed in /usr/bin directory, and the name of the executable is python3. Hence, we add this statement to hello.py file<br><br></div><div><br></div><div>Open Compiler</div><pre>#!/usr/bin/python3\r\n\r\nprint (\"Hello World\")\r\n<br></pre><div><br>You also need to give the file executable permission by using the chmod +x command<br><br></div><pre>$ chmod +x hello.py\r\n<br></pre><div><br>Then, you can run the program with following command line −<br><br></div><pre>$ ./hello.py\r\n<br></pre><div><br>This will display the following output<br><br></div><pre>Hello World\r\n<br></pre><div><br>FAQs<br><br></div><div><br>1. Why the first program is called Hello World?<br><br></div><div><br>It is just a simple program to test the <a href=\"https://www.tutorialspoint.com/python/python_basic_syntax.htm\">basic syntax</a> and compiler/interpreter configuration of <a href=\"https://www.tutorialspoint.com/python/index.htm\">Python programming language</a>.<br><br></div><div><br>2. Installation of Python is required to run Hello World program?<br><br></div><div><br>Yes. Python installation is required to run Hello World program.<br><br></div><div><br>3. How do I run a Python program without installing it?<br><br></div><div><br>TutorialsPoint developed an online environment where you can run your codes. You can use the <a href=\"https://www.tutorialspoint.com/online_python_compiler.php\">Python online compiler</a> to run your Python programs.<br><br></div><div><br>4. First Program Vs Hello World Program in Python?<br><br></div><div><br>There is no difference. The first program of Python is generally known as the Hello World program.<br><br></div><div><br>5. Which is/are the method to print Hello World or any message?<br><br></div><div><br>You can use the following methods –<br><br></div><ul><li>print() method</li><li>sys.stdout.write() method by importing the sys module</li><li>Using python-f string</li></ul>', 3, '2024-10-30 11:22:03', '2024-10-30 11:22:03', NULL),
(19, 'Introduction', '<div><br>For better understanding of React Native concepts, we will borrow a few lines from the official documentation −<br><br></div><div><br>React Native lets you build mobile apps using only JavaScript. It uses the same design as React, letting you compose a rich mobile UI from declarative components. With React Native, you don\'t build a mobile web app, an HTML5 app, or a hybrid app; you build a real mobile app that\'s indistinguishable from an app built using Objective-C or Java. React Native uses the same fundamental UI building blocks as regular iOS and Android apps. You just put those building blocks together using JavaScript and React.<br><br></div><div><br>React Native Features<br><br></div><div><br>Following are the features of React Native −<br><br></div><ul><li><strong>React</strong> − This is a Framework for building web and mobile apps using JavaScript.</li><li><strong>Native</strong> − You can use native components controlled by JavaScript.</li><li><strong>Platforms</strong> − React Native supports IOS and Android platform.</li></ul><div><br>React Native Advantages<br><br></div><div><br>Follow are the advantages of React Native −<br><br></div><ul><li><strong>JavaScript</strong> − You can use the existing JavaScript knowledge to build native mobile apps.</li><li><strong>Code sharing</strong> − You can share most of your code on different platforms.</li><li><strong>Community</strong> − The community around React and React Native is large, and you will be able to find any answer you need.</li></ul><div><br></div><div><a href=\"https://www.tutorialspoint.com/latest/courses?utm_source=tutorialspoint&amp;utm_medium=tutorials_3p&amp;utm_campaign=internal\"><br>Explore our&nbsp;<strong>latest online courses</strong>&nbsp;and learn new skills at your own pace. Enroll and become a certified expert to boost your career.<br></a><br></div><div><br>React Native Limitations<br><br></div><div><br>Following are the limitations of React Native −<br><br></div><ul><li><strong>Native Components</strong> − If you want to create native functionality which is not created yet, you will need to write some platform specific code.</li></ul>', 4, '2024-10-30 11:25:09', '2024-10-30 11:25:09', NULL);
INSERT INTO `topics` (`id`, `title`, `docs`, `skill_id`, `created_at`, `updated_at`, `deleted_at`) VALUES
(20, 'Introduction', '<div><br>What is PHP?<br><br></div><div><br>PHP is an open-source general purpose scripting language, widely used for website development. It is developed by Rasmus Lerdorf. PHP stands for a recursive acronym PHP: Hypertext Preprocessor.<br><br></div><div><br>PHP is the world’s most popular server-side programming language. Its latest version PHP 8.2.8, released on July 4th, 2023.<br><br></div><div><br>PHP is a server-side scripting language that is embedded in HTML. PHP is a cross-platform language, capable of running on all major operating system platforms and with most of the web server programs such as Apache, IIS, lighttpd and nginx.<br><br></div><div><br>A large number of reusable classes and libraries are available on PEAR and Composer. PEAR (PHP Extension and Application Repository) is a distribution system for reusable PHP libraries or classes. Composer is a dependency management tool in PHP.<br><br></div><div><br>Why Learn PHP?<br><br></div><div><br>PHP one of the most preferred languages for creating interactive websites and web applications. PHP scripts can be easily embedded into HTML. With PHP, you can build<br><br></div><ul><li>Web Pages and Web-Based Applications</li><li>Content Management Systems, and</li><li>Ecommerce Applications etc.</li></ul><div><br>A number of PHP based web frameworks have been developed to speed-up the web application development. The examples are WordPress, Laravel, Symfony etc.<br><br></div><div><br></div><div><a href=\"https://www.tutorialspoint.com/latest/courses?utm_source=tutorialspoint&amp;utm_medium=tutorials_3p&amp;utm_campaign=internal\"><br>Explore our&nbsp;<strong>latest online courses</strong>&nbsp;and learn new skills at your own pace. Enroll and become a certified expert to boost your career.<br></a><br></div><div><br>Advantages of Using PHP<br><br></div><div><br>PHP is a MUST for students and working professionals to become great Software Engineers, especially when they are working in Web Development Domain.<br><br></div><div><br>Some of the most notable advantages of using PHP are listed below −<br><br></div><ul><li>PHP is a multi-paradigm language that supports imperative, functional, object-oriented, and procedural programming methodologies.</li><li>PHP is a server-side scripting language that is embedded in HTML. It is used to manage dynamic content, databases, session tracking, even build entire e-commerce sites.</li><li>PHP is integrated with a number of popular databases including MySQL, PostgreSQL, Oracle, Sybase, Informix, and Microsoft SQL Server.</li><li>PHP is pleasingly zippy in its execution, especially when compiled as an Apache module on the Unix side. The MySQL server, once started, executes even very complex queries with huge result sets in record-setting time.</li><li>PHP supports a number of protocols such as POP3, IMAP, and LDAP. PHP supports distributed object architectures (COM and CORBA), which makes n-tier development possible.</li><li>PHP is forgiving: PHP language tries to be as forgiving as possible.</li><li>PHP has a familiar C-like syntax.</li></ul><div><br>There are five important characteristics of PHP that make its practical nature possible: Simplicity, Efficiency, Security, Flexibility, and Familiarity.<br><br></div><div><br>Hello World Using PHP<br><br></div><div><br>Just to give you a little excitement about PHP, I\'m going to give you a small conventional <a href=\"https://www.tutorialspoint.com/php/php_hello_world.htm\">PHP Hello World program</a>. You can try it using the <strong>Edit &amp; Run</strong> button.<br><br></div><div><br></div><div>Open Compiler</div><pre><strong>&lt;?php</strong>\r\n   echo \"Hello, World!\";\r\n<strong>?&gt;</strong>\r\n<br></pre><div><br>Online PHP Compiler<br><br></div><div><br>Our PHP tutorial provides various examples to explain different concepts. We have provided an online compiler, where you can write, save, run, and share your programs directly from your browser without setting up any development environment. Practice PHP here: <a href=\"https://www.tutorialspoint.com/execute_php_online.php\"><strong>Online PHP compiler</strong></a>.<br><br></div><div><br>Audience<br><br></div><div><br>This PHP tutorial is designed for programmers who are completely unaware of PHP concepts but have a basic understanding on computer programming.<br><br></div><div><br>Prerequisites<br><br></div><div><br>Before proceeding with this tutorial, all that you need to have is a basic understanding of computer programming. Knowledge of HTML, CSS, JavaScript, and databases will be an added advantage.<br><br></div><div><br>Frequently Asked Questions about PHP<br><br></div><div><br>There are some very Frequently Asked Questions(FAQ) about PHP, this section tries to answer them briefly.<br><br></div><div><br>Do I Need Prior Programming Experience to Learn PHP?<figure data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;height&quot;:10,&quot;url&quot;:&quot;https://www.tutorialspoint.com/static/images/chevron-up-black.svg&quot;,&quot;width&quot;:18}\" data-trix-content-type=\"image\" class=\"attachment attachment--preview\"><img src=\"https://www.tutorialspoint.com/static/images/chevron-up-black.svg\" width=\"18\" height=\"10\"><figcaption class=\"attachment__caption\"></figcaption></figure><br><br></div><div><br>Is PHP Free to Use?<figure data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;height&quot;:10,&quot;url&quot;:&quot;https://www.tutorialspoint.com/static/images/chevron-up-black.svg&quot;,&quot;width&quot;:18}\" data-trix-content-type=\"image\" class=\"attachment attachment--preview\"><img src=\"https://www.tutorialspoint.com/static/images/chevron-up-black.svg\" width=\"18\" height=\"10\"><figcaption class=\"attachment__caption\"></figcaption></figure><br><br></div><div><br>What are the Applications of PHP?<figure data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;url&quot;:&quot;https://www.tutorialspoint.com/static/images/chevron-up-black.svg&quot;}\" data-trix-content-type=\"image\" class=\"attachment attachment--preview\"><img src=\"https://www.tutorialspoint.com/static/images/chevron-up-black.svg\" width=\"18\" height=\"10\"><figcaption class=\"attachment__caption\"></figcaption></figure><br><br></div><div><br>How Do I Install PHP?<figure data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;height&quot;:10,&quot;url&quot;:&quot;https://www.tutorialspoint.com/static/images/chevron-up-black.svg&quot;,&quot;width&quot;:18}\" data-trix-content-type=\"image\" class=\"attachment attachment--preview\"><img src=\"https://www.tutorialspoint.com/static/images/chevron-up-black.svg\" width=\"18\" height=\"10\"><figcaption class=\"attachment__caption\"></figcaption></figure><br><br></div><div><br>What Tools and Technologies Work Well with PHP?<figure data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;height&quot;:10,&quot;url&quot;:&quot;https://www.tutorialspoint.com/static/images/chevron-up-black.svg&quot;,&quot;width&quot;:18}\" data-trix-content-type=\"image\" class=\"attachment attachment--preview\"><img src=\"https://www.tutorialspoint.com/static/images/chevron-up-black.svg\" width=\"18\" height=\"10\"><figcaption class=\"attachment__caption\"></figcaption></figure><br><br></div><div><br>Can PHP Be Used for Both Frontend and Backend Development?<figure data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;height&quot;:10,&quot;url&quot;:&quot;https://www.tutorialspoint.com/static/images/chevron-up-black.svg&quot;,&quot;width&quot;:18}\" data-trix-content-type=\"image\" class=\"attachment attachment--preview\"><img src=\"https://www.tutorialspoint.com/static/images/chevron-up-black.svg\" width=\"18\" height=\"10\"><figcaption class=\"attachment__caption\"></figcaption></figure><br><br></div><div><br>Are There Security Concerns with PHP?<figure data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;height&quot;:10,&quot;url&quot;:&quot;https://www.tutorialspoint.com/static/images/chevron-up-black.svg&quot;,&quot;width&quot;:18}\" data-trix-content-type=\"image\" class=\"attachment attachment--preview\"><img src=\"https://www.tutorialspoint.com/static/images/chevron-up-black.svg\" width=\"18\" height=\"10\"><figcaption class=\"attachment__caption\"></figcaption></figure><br><br></div><div><br>What Are the Latest Features and Updates in PHP?<figure data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;height&quot;:10,&quot;url&quot;:&quot;https://www.tutorialspoint.com/static/images/chevron-up-black.svg&quot;,&quot;width&quot;:18}\" data-trix-content-type=\"image\" class=\"attachment attachment--preview\"><img src=\"https://www.tutorialspoint.com/static/images/chevron-up-black.svg\" width=\"18\" height=\"10\"><figcaption class=\"attachment__caption\"></figcaption></figure><br><br></div><div><br>How Long Will it Take to Master PHP?<figure data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;height&quot;:10,&quot;url&quot;:&quot;https://www.tutorialspoint.com/static/images/chevron-up-black.svg&quot;,&quot;width&quot;:18}\" data-trix-content-type=\"image\" class=\"attachment attachment--preview\"><img src=\"https://www.tutorialspoint.com/static/images/chevron-up-black.svg\" width=\"18\" height=\"10\"><figcaption class=\"attachment__caption\"></figcaption></figure><br><br></div><div><br>What Resources Do I Need to Learn PHP?<br><br></div>', 5, '2024-10-30 11:27:37', '2024-10-30 11:27:37', NULL),
(21, 'Introduction', '<div><br>Python Iterators<br><br></div><div><br>An iterator in Python is an object that enables traversal through a collection such as a list or a tuple, one element at a time. It follows the iterator protocol by using the implementation of two methods <strong>__iter__()</strong> and <strong>__next__()</strong>.<br><br></div><div><br>The <strong>__iter__()</strong> method returns the iterator object itself and the <strong>__next__()</strong> method returns the next element in the sequence by raising a <strong>StopIteration</strong> exception when no more elements are available.<br><br></div><div><br>Iterators provide a memory-efficient way to iterate over data, especially useful for large datasets. They can be created from iterable objects using the <strong>iter()</strong> function or implemented using custom classes and generators.<br><br></div><div><br>Iterables vs Iterators<br><br></div><div><br>Before going deep into the iterator working, we should know the difference between the Iterables and Iterators.<br><br></div><ul><li><strong>Iterable:</strong> An object capable of returning its members one at a time (e.g., lists, tuples).</li><li><strong>Iterator:</strong> An object representing a stream of data, returned one element at a time.</li></ul><div><br>We normally use <strong>for</strong> loop to iterate through an iterable as follows −<br><br></div><pre>for element in sequence:\r\n   print (element)\r\n<br></pre><div><br>Python\'s built-in method <strong>iter()</strong> implements <strong>__iter__()</strong> method. It receives an iterable and returns iterator object.<br><br></div><div><br>Example of Python Iterator<br><br></div><div><br>Following code obtains iterator object from sequence types such as list, string and tuple. The <strong>iter()</strong> function also returns keyiterator from dictionary.<br><br></div><div><br></div><div>Open Compiler</div><pre>print (iter(\"aa\"))\r\nprint (iter([1,2,3]))\r\nprint (iter((1,2,3)))\r\nprint (iter({}))\r\n<br></pre><div><br>It will produce the following <strong>output</strong> −<br><br></div><pre>&lt;str_iterator object at 0x7fd0416b42e0&gt;\r\n&lt;list_iterator object at 0x7fd0416b42e0&gt;\r\n&lt;tuple_iterator object at 0x7fd0416b42e0&gt;\r\n&lt;dict_keyiterator object at 0x7fd041707560&gt;\r\n<br></pre><div><br>However, int id not iterable, hence it produces TypeError.<br><br></div><div><br></div><div>Open Compiler</div><pre>iterator = iter(100)\r\nprint (iterator)\r\n<br></pre><div><br>It will produce the following <strong>output</strong> −<br><br></div><pre>Traceback (most recent call last):\r\n   File \"C:\\Users\\user\\example.py\", line 5, in &lt;module&gt;\r\n      print (iter(100))\r\n            ^^^^^^^^^\r\nTypeError: \'int\' object is not iterable\r\n<br></pre><div><br>Error Handling in Iterators<br><br></div><div><br>Iterator object has a method named <strong>__next__()</strong>. Every time it is called, it returns next element in iterator stream. Call to next() function is equivalent to calling __next__() method of iterator object.<br><br></div><div><br>This method which raises a <strong>StopIteration</strong> exception when there are no more items to return.<br><br></div><div><br>Example<br><br></div><div><br>In the following is an example the iterator object we have created have only 3 elements and we are iterating through it more than thrice −<br><br></div><div><br></div><div>Open Compiler</div><pre>it = iter([1,2,3])\r\nprint (next(it))\r\nprint (it.__next__())\r\nprint (it.__next__())\r\nprint (next(it))\r\n<br></pre><div><br>It will produce the following <strong>output</strong> −<br><br></div><pre>1\r\n2\r\n3\r\nTraceback (most recent call last):\r\n   File \"C:\\Users\\user\\example.py\", line 5, in &lt;module&gt;\r\n      print (next(it))\r\n            ^^^^^^^^\r\nStopIteration\r\n<br></pre><div><br>This exception can be caught in the code that consumes the iterator using try and except blocks, though it\'s more common to handle it implicitly by using constructs like for loops which manage the StopIteration exception internally.<br><br></div><div><br></div><div>Open Compiler</div><pre>it = iter([1,2,3, 4, 5])\r\nprint (next(it))\r\nwhile True:\r\n   try:\r\n      no = next(it)\r\n      print (no)\r\n   except StopIteration:\r\n      break\r\n<br></pre><div><br>It will produce the following <strong>output</strong> −<br><br></div><pre>1\r\n2\r\n3\r\n4\r\n5\r\n<br></pre><div><br></div><div><a href=\"https://www.tutorialspoint.com/certification/complete-python-prime-pack/index.asp?utm_source=tutorialspoint&amp;utm_medium=python_tutorial_3p&amp;utm_campaign=internal\"><br>Learn&nbsp;<strong>Python</strong>&nbsp;in-depth with real-world projects through our&nbsp;<strong>Python certification course</strong>. Enroll and become a certified expert to boost your career.<br></a><br></div><div><br>Custom Iterator<br><br></div><div><br>A custom iterator in Python is a user-defined class that implements the iterator protocol which consists of two methods <strong>__iter__()</strong> and <strong>__next__()</strong>. This allows the class to behave like an iterator, enabling traversal through its elements one at a time.<br><br></div><div><br>To define a custom iterator class in Python, the class must define these methods.<br><br></div><div><br>Example<br><br></div><div><br>In the following example, the Oddnumbers is a class implementing __iter__() and __next__() methods. On every call to __next__(), the number increments by 2 thereby streaming odd numbers in the range 1 to 10.<br><br></div><div><br></div><div>Open Compiler</div><pre>class Oddnumbers:\r\n\r\n   def __init__(self, end_range):\r\n      self.start = -1\r\n      self.end = end_range\r\n\r\n   def __iter__(self):\r\n      return self\r\n\r\n   def __next__(self):\r\n      if self.start &lt; self.end-1:\r\n         self.start += 2\r\n         return self.start\r\n      else:\r\n         raise StopIteration\r\n\r\ncountiter = Oddnumbers(10)\r\nwhile True:\r\n   try:\r\n      no = next(countiter)\r\n      print (no)\r\n   except StopIteration:\r\n      break\r\n<br></pre><div><br>It will produce the following <strong>output</strong> −<br><br></div><pre>1\r\n3\r\n5\r\n7\r\n9\r\n<br></pre><div><br>Example<br><br></div><div><br>Let\'s create another iterator that generates the first n Fibonacci numbers with the following code −<br><br></div><div><br></div><div>Open Compiler</div><pre>class Fibonacci:\r\n   def __init__(self, max_count):\r\n      self.max_count = max_count\r\n      self.count = 0\r\n      self.a, self.b = 0, 1\r\n\r\n   def __iter__(self):\r\n      return self\r\n\r\n   def __next__(self):\r\n      if self.count &gt;= self.max_count:\r\n         raise StopIteration\r\n        \r\n      fib_value = self.a\r\n      self.a, self.b = self.b, self.a + self.b\r\n      self.count += 1\r\n      return fib_value\r\n\r\n# Using the Fibonacci iterator\r\nfib_iterator = Fibonacci(10)\r\n\r\nfor number in fib_iterator:\r\n   print(number)\r\n<br></pre><div><br>It will produce the following <strong>output</strong> −<br><br></div><pre>0\r\n1\r\n1\r\n2\r\n3\r\n5\r\n8\r\n13\r\n21\r\n34\r\n<br></pre><div><br>Asynchronous Iterator<br><br></div><div><br>Asynchronous iterators in Python allow us to iterate over asynchronous sequences, enabling the handling of async operations within a loop.<br><br></div><div><br>They follow the asynchronous iterator protocol which consists of the methods <strong>__aiter__()</strong> and <strong>__anext__()</strong> (added in Python 3.10 version onwards.). These methods are used in conjunction with the async for loop to iterate over asynchronous data sources.<br><br></div><div><br>The <strong>aiter()</strong> function returns an asynchronous iterator object. It is an asynchronous counter part of the classical iterator. Any asynchronous iterator must support _<strong>__aiter()__</strong> and <strong>__anext__()</strong> methods. These methods are internally called by the two built-in functions.<br><br></div><blockquote>Asynchronous functions are called co-routines and are executed with <strong>asyncio.run()</strong> method. The main() co-routine contains a while loop that successively obtains odd numbers and raises StopAsyncIteration if the number exceeds 9.</blockquote><div><br>Like the classical iterator the asynchronous iterator gives a stream of objects. When the stream is exhausted, the StopAsyncIteration exception is raised.<br><br></div><div><br>Example<br><br></div><div><br>In the example give below, an asynchronous iterator class Oddnumbers is declared. It implements __aiter__() and __anext__() method. On each iteration, a next odd number is returned and the program waits for one second, so that it can perform any other process asynchronously.<br><br></div><div><br></div><div>Open Compiler</div><pre>import asyncio\r\n\r\nclass Oddnumbers():\r\n   def __init__(self):\r\n      self.start = -1\r\n\r\n   def __aiter__(self):\r\n      return self\r\n      \r\n   async def __anext__(self):\r\n      if self.start &gt;= 9:\r\n         raise StopAsyncIteration\r\n      self.start += 2\r\n      await asyncio.sleep(1)\r\n      return self.start\r\n      \r\nasync def main():\r\n   it = Oddnumbers()\r\n   while True:\r\n      try:\r\n         awaitable = anext(it)\r\n         result = await awaitable\r\n         print(result)\r\n      except StopAsyncIteration:\r\n         break\r\n         \r\nasyncio.run(main())\r\n<br></pre><div><br>Output<br><br></div><div><br>It will produce the following <strong>output</strong> −<br><br></div><pre>1\r\n3\r\n5\r\n7\r\n9</pre>', 6, '2024-10-30 11:32:01', '2024-10-30 11:32:01', NULL),
(22, 'History of Bangladesh', '<div><strong>The 13th and 15th Century&nbsp;</strong></div><div><br></div><div><strong>From the 13th century A.D.</strong> the Buddhists and Hindus were swamped by the flood of Muslim conquerors and the tide of Islam up to 18th century. Sometimes there were independent rulers like the Hussain Shahi and Ilyas Shahi dynasties, while at other times they ruled on behalf of the Imperial seat of Delhi.&nbsp;</div><div><strong>From the 15th century,</strong> the Europeans, namely Portuguese, Dutch, French and British traders exerted an economic influence over the region. British political rule over the region began in 1757 A.D., when the last Muslim ruler of Bengal was defeated at Palassey. In 1947 the subcontinent was partitioned into India and Pakistan. Present Bangladesh became the Eastern Wing of the then Pakistan. But the movement for autonomy of East Pakistan started within a couple of years because of language and cultural differences and economic disparity between the two wings.</div><div><strong>The Language Movement</strong></div><div>The Language Movement of 1952 to recognize Bangla as a state language may be termed as the first step towards independence.&nbsp;</div><div>Political and economic deprivation of the Bengalees prompted Bangabandhu Sheikh Mujibur Rahman, the Father of the Nation, to put forward in 1966 his historic six points, the \"Magna Carta\" which in effect structured the foundation for East Pakistan\'s future independence.</div><div><strong>The War of Liberation</strong></div><div>In the 1970 elections, even though the Awami League emerged as the largest party in Pakistan Parliament, it was not allowed to form the government by the ruling military junta. In the backdrop of a non-cooperation movement launched against the military regime by Awami League.</div><div>Bangabandhu declared at a historic public meeting held at Ramna Race Course (renamed Suhrawardy Uddyan) on 7 March, 1971, attended by around 2 million people, \"The struggle this tune is the struggle for freedom, the struggle this tune is the struggle for independence.\" It was a defacto declaration of independence.</div><div>Thus in a preplanned manner on 25th March 1971. The Pakistan army embarked on what may be termed as history\'s worst genocide. A military crackdown was ordered, and Bangabandhu Sheikh Mujib was arrested and taken away to West Pakistan. But just before he was arrested he sent out a call for the liberation war to begin. Known as the Declaration of (lie War of Independence, this hurriedly written historic document read as follows:</div><div>\"Pak Army suddenly attacked EPR Base at Pilkhana, Rajarbagh Police Line and killing citizens. Street battles are going on in every street of Dacca. Chattogram. I appeal to the nations of the world for help. Our freedom fighters are gallantly fighting with the enemies to free the motherland. I appeal and order you all in the name of Almighty Allah to fight to the last drop of blood to liberate the country. Ask Police, EPR, Bengal Regiment and Ansar to stand by you and to fight. No compromise. Victory is ours. Drive out the enemies from the holy soil of motherland. Convey this message to all Awami League leaders, workers and other patriots and lovers of freedom. May Allah bless you. Joy Bangla\".</div><div><strong>Independence</strong></div><div>After nine months of war, the Pakistani occupation forces surrendered in Dhaka on 16th December. 1971 after killing an estimated three million people. Due to the heroic resistance and supreme sacrifices of the valiant freedom fighters Bangladesh finally became an independent sovereign state.&nbsp;</div><div>Father of the Nation Bangahandhu Sheikh Mujibur Rahman was the founder- president of Bangladesh. He was subsequently assassinated on 15th August, 1975 by a group of conspirators. After 21 years of military and authoritarian rule, Bangabandhu\'s party-Bangladesh Awami League led by his illustrious daughter Sheikh Hasina, swept hack to power through a very free and fair parliamentary election held under a Caretaker Government in June. 1996.</div>', 7, '2024-10-30 11:35:15', '2024-10-30 11:35:15', NULL),
(23, 'Introduction', '<div><br><strong>social science</strong>, any branch of academic study or <a href=\"https://www.britannica.com/science/science\">science</a> that deals with <a href=\"https://www.britannica.com/topic/human-behavior\">human behaviour</a> in its social and cultural aspects. Usually included within the social sciences are <a href=\"https://www.britannica.com/science/cultural-anthropology\">cultural</a>(or social) <a href=\"https://www.britannica.com/science/anthropology\">anthropology</a>, <a href=\"https://www.britannica.com/topic/sociology\">sociology</a>, <a href=\"https://www.britannica.com/science/psychology\">psychology</a>, <a href=\"https://www.britannica.com/topic/political-science\">political science</a>, and <a href=\"https://www.britannica.com/money/economics\">economics</a>. The <a href=\"https://www.merriam-webster.com/dictionary/discipline\">discipline</a> of <a href=\"https://www.britannica.com/topic/historiography\">historiography</a> is regarded by many as a social science, and certain areas of historical study are almost indistinguishable from work done in the social sciences. Most historians, however, consider <a href=\"https://www.britannica.com/topic/history\">history</a> as one of the <a href=\"https://www.britannica.com/topic/humanities\">humanities</a>. In the <a href=\"https://www.britannica.com/place/United-States\">United States</a>, focused programs, such as African-American Studies, Latinx Studies, Women, Gender, and Sexuality Studies, are, as a <a href=\"https://www.britannica.com/topic/rule-political-science\">rule</a>, also included among the social sciences, as are often Latin American Studies and Middle Eastern Studies, while, for instance, French, German, or Italian Studies are commonly associated with humanities. In the past, Sovietology was always considered a social science discipline, in contrast to Russian Studies.<br>Beginning in the 1950s, the term <a href=\"https://www.britannica.com/science/behavioral-science\"><em>behavioral sciences</em></a> was often applied to the <a href=\"https://www.merriam-webster.com/dictionary/disciplines\">disciplines</a> designated as the social sciences. Those who favoured this term did so in part because these disciplines were thus brought closer to some of the sciences, such as <a href=\"https://www.britannica.com/science/physical-anthropology\">physical anthropology</a> and <a href=\"https://www.britannica.com/science/biological-psychology\">physiological psychology</a>, which also deal with human behaviour.<br>Strictly speaking, the social sciences, as distinct and recognized academic disciplines, emerged only on the cusp of the 20th century. But one must go back farther in time for the origins of some of their fundamental ideas and objectives. In the largest sense, the origins go all the way back to the <a href=\"https://www.britannica.com/place/ancient-Greece\">ancient Greeks</a> and their rationalist inquiries into <a href=\"https://www.britannica.com/topic/human-nature\">human nature</a>, the <a href=\"https://www.britannica.com/topic/state-sovereign-political-entity\">state</a>, and <a href=\"https://www.britannica.com/topic/ethics-philosophy\">morality</a>. The <a href=\"https://www.britannica.com/dictionary/heritage\">heritage</a> of both Greece and Rome is a powerful one in the history of social thought, as it is in other areas of Western society. Very probably, apart from the initial Greek determination to study all things in the spirit of dispassionate and rational inquiry, there would be no social sciences today. True, there have been long periods of time, as during the Western <a href=\"https://www.britannica.com/event/Middle-Ages\">Middle Ages</a>, when the Greek rationalist temper was lacking. But the recovery of this temper, through texts of the great classical philosophers, is the very essence of the <a href=\"https://www.britannica.com/event/Renaissance\">Renaissance</a> and the <a href=\"https://www.britannica.com/event/Enlightenment-European-history\">Enlightenment</a> in modern European history. With the Enlightenment, in the 17th and 18th centuries, one may begin.</div><div><br></div><div>Heritage of the Middle Ages and the Renaissance</div><div>Effects of theology</div><div><br></div><div>The same impulses that led people in that age to explore <a href=\"https://www.britannica.com/place/Earth\">Earth</a>, the stellar regions, and the nature of <a href=\"https://www.britannica.com/science/matter\">matter</a> led them also to explore the institutions around them: state, economy, <a href=\"https://www.britannica.com/topic/religion\">religion</a>, <a href=\"https://www.merriam-webster.com/dictionary/morality\">morality</a>, and, above all, human nature itself. It was the fragmentation of <a href=\"https://www.britannica.com/topic/Western-philosophy/Medieval-philosophy#ref8638\">medieval philosophy</a> and theory, and, with this, the shattering of the <a href=\"https://www.merriam-webster.com/dictionary/medieval\">medieval</a> worldview that had lain deep in thought until about the 16th century, that was the immediate basis of the rise of the several strands of specialized social thought that were in time to provide the inspiration for the social sciences.</div><div><br></div><div>Medieval <a href=\"https://www.britannica.com/topic/theology\">theology</a>, especially as it appears in <a href=\"https://www.britannica.com/biography/Saint-Thomas-Aquinas\">St. Thomas Aquinas</a>’s <em>Summa theologiae</em>(1265/66–1273), contained and fashioned syntheses from ideas about humanity and society—ideas indeed that may be seen to be political, social, economic, anthropological, and geographical in their substance. But it is partly this close relation between medieval <a href=\"https://www.britannica.com/dictionary/theology\">theology</a> and ideas of the social sciences that accounts for the different trajectories of the social sciences, on the one hand, and the trajectories of the physical and life sciences, on the other. From the time of the English philosopher <a href=\"https://www.britannica.com/biography/Roger-Bacon\">Roger Bacon</a> in the 13th century, there were at least some rudiments of <a href=\"https://www.britannica.com/science/physical-science\">physical science</a> that were largely independent of medieval theology and philosophy. Historians of physical science have no difficulty in tracing the continuation of this experimental tradition, primitive and irregular though it was by later standards, throughout the <a href=\"https://www.britannica.com/event/Middle-Ages\">Middle Ages</a>. Side by side with the kinds of experiment made notable by Bacon were impressive changes in <a href=\"https://www.britannica.com/technology/history-of-technology\">technology</a> through the medieval period and then, in striking <a href=\"https://www.britannica.com/topic/degree-education\">degree</a>, in the <a href=\"https://www.britannica.com/event/Renaissance\">Renaissance</a>. Efforts to improve agricultural productivity; the rising utilization of <a href=\"https://www.britannica.com/technology/gunpowder\">gunpowder</a>, with consequent development of guns and the problems that they presented in ballistics; growing <a href=\"https://www.britannica.com/money/international-trade\">trade</a>, leading to increased use of ships and improvements in the arts of <a href=\"https://www.britannica.com/technology/navigation-technology\">navigation</a>, including use of <a href=\"https://www.britannica.com/science/optical-telescope\">telescopes</a>; and the whole range of such mechanical arts in the Middle Ages and Renaissance as <a href=\"https://www.britannica.com/topic/architecture\">architecture</a>, <a href=\"https://www.britannica.com/technology/engineering\">engineering</a>, <a href=\"https://www.britannica.com/science/optics\">optics</a>, and the construction of <a href=\"https://www.britannica.com/technology/watch\">watches</a> and <a href=\"https://www.britannica.com/technology/clock\">clocks</a>—all of this put a high premium on a <a href=\"https://www.merriam-webster.com/dictionary/pragmatic\">pragmatic</a> and operational understanding of at least the simpler principles of <a href=\"https://www.britannica.com/science/mechanics\">mechanics</a>, <a href=\"https://www.britannica.com/science/physics-science\">physics</a>, <a href=\"https://www.britannica.com/science/astronomy\">astronomy</a>, and, in time, <a href=\"https://www.britannica.com/science/chemistry\">chemistry</a>.</div>', 8, '2024-10-30 11:39:38', '2024-10-30 11:39:38', NULL),
(24, 'Introduction', '<div><strong>political science</strong>, the systematic study of governance by the application of <a href=\"https://www.merriam-webster.com/dictionary/empirical\">empirical</a> and generally scientific methods of analysis. As traditionally defined and studied, political science examines the state and its organs and institutions. The contemporary <a href=\"https://www.merriam-webster.com/dictionary/discipline\">discipline</a>, however, is considerably broader than this, <a href=\"https://www.merriam-webster.com/dictionary/encompassing\">encompassing</a> studies of all the societal, cultural, and psychological factors that mutually influence the operation of government and the <a href=\"https://www.britannica.com/topic/body-politic\">body politic</a>.</div><div><br></div><div>Although political science borrows heavily from the other <a href=\"https://www.britannica.com/topic/social-science\">social sciences</a>, it is distinguished from them by its focus on <a href=\"https://www.britannica.com/topic/political-power\">power</a>—defined as the ability of one political actor to get another actor to do what it wants—at the international, national, and local levels. Political science is generally used in the singular, but in French and Spanish the plural (<em>sciences politiques</em> and <em>ciencias políticas</em>, respectively) is used, perhaps a reflection of the discipline’s <a href=\"https://www.merriam-webster.com/dictionary/eclectic\">eclectic</a> nature. Although political science overlaps considerably with <a href=\"https://www.britannica.com/topic/political-philosophy\">political philosophy</a>, the two fields are distinct. <a href=\"https://www.britannica.com/topic/political-philosophy\">Political philosophy</a>is concerned primarily with political ideas and values, such as rights, <a href=\"https://www.britannica.com/topic/justice-social-concept\">justice</a>, freedom, and political obligation (whether people should or should not obey political authority); it is normative in its approach (i.e., it is concerned with what ought to be rather than with what is) and rationalistic in its method. In contrast, political science studies institutions and behaviour, favours the descriptive over the normative, and develops theories or draws conclusions based on empirical observations, which are expressed in quantitative terms where possible.</div><div><br></div><div>Although political <a href=\"https://www.britannica.com/science/science\">science</a>, like all modern sciences, involves empirical investigation, it generally does not produce precise measurements and predictions. This has led some scholars to question whether the discipline can be accurately described as a science. However, if the term <em>science</em> applies to any body of systematically organized knowledge based on facts <a href=\"https://www.merriam-webster.com/dictionary/ascertained\">ascertained</a> by empirical methods and described by as much measurement as the material allows, then political science is a science, like the other social <a href=\"https://www.merriam-webster.com/dictionary/disciplines\">disciplines</a>. In the 1960s the American historian of science <a href=\"https://www.britannica.com/biography/Thomas-S-Kuhn\">Thomas S. Kuhn</a>argued that political science was “pre-paradigmatic,” not yet having developed basic research <a href=\"https://www.merriam-webster.com/dictionary/paradigms\">paradigms</a>, such as the <a href=\"https://www.britannica.com/science/periodic-table\">periodic table</a> that defines <a href=\"https://www.britannica.com/science/chemistry\">chemistry</a>. It is likely that political science never will develop a single, universal <a href=\"https://www.merriam-webster.com/dictionary/paradigm\">paradigm</a> or theory, and attempts to do so have seldom lasted more than a generation, making political science a discipline of many trends but few classics.</div><div><br></div><div>Fields and subfields</div><div><br></div><div>Modern university departments of political science (alternatively called <em>government</em> or <em>politics</em> at some institutions) are often divided into several fields, each of which contains various subfields.</div><div><br></div><ol><li>Domestic politics is generally the most common field of study; its subfields include <a href=\"https://www.britannica.com/topic/public-opinion\">public opinion</a>, <a href=\"https://www.britannica.com/topic/election-political-science\">elections</a>, national <a href=\"https://www.britannica.com/topic/government\">government</a>, and state, local, or regional government.</li><li>Comparative politics focuses on politics within countries (often grouped into world regions) and analyzes similarities and differences between countries.&nbsp;</li><li><a href=\"https://www.britannica.com/topic/international-relations\">International relations</a> considers the political relationships and interactions between countries, including the causes of <a href=\"https://www.britannica.com/topic/war\">war</a>, the formation of <a href=\"https://www.britannica.com/topic/foreign-policy\">foreign policy</a>, international <a href=\"https://www.britannica.com/money/political-economy\">political economy</a>, and the structures that increase or decrease the policy options available to governments. International relations is organized as a separate department in some universities.</li><li>Political theory includes classical political <a href=\"https://www.britannica.com/topic/philosophy\">philosophy</a> and <a href=\"https://www.britannica.com/dictionary/contemporary\">contemporary</a>theoretical perspectives (e.g., constructivism, critical theory, and postmodernism).</li><li><a href=\"https://www.britannica.com/topic/public-administration\">Public administration</a> studies the role of the <a href=\"https://www.britannica.com/topic/bureaucracy\">bureaucracy</a>. It is the field most oriented toward practical applications within political science and is often organized as a separate department that prepares students for careers in the <a href=\"https://www.britannica.com/topic/civil-service\">civil service</a>.</li><li>Public <a href=\"https://www.britannica.com/topic/law\">law</a> studies <a href=\"https://www.britannica.com/topic/constitution-politics-and-law\">constitutions</a>, legal systems, <a href=\"https://www.britannica.com/topic/civil-rights\">civil rights</a>, and <a href=\"https://www.britannica.com/topic/criminal-justice\">criminal justice</a>(now increasingly its own discipline).</li><li>Public policy examines the passage and implementation of all types of government policies, particularly those related to civil rights, defense, health, <a href=\"https://www.britannica.com/topic/education\">education</a>, <a href=\"https://www.britannica.com/money/economic-growth\">economic growth</a>, <a href=\"https://www.britannica.com/topic/urban-renewal\">urban renewal</a>, regional development, and environmental protection.</li></ol><div><br></div><div><br></div><h1>Historical development</h1><div>Ancient influences</div><div><br>Stone rubbing (19th century?) of Confucius from a design attributed to Wu Daoxuan (flourished 700–760 CE).<br>Analyses of politics appeared in ancient <a href=\"https://www.merriam-webster.com/dictionary/cultures\">cultures</a> in works by various thinkers, including <a href=\"https://www.britannica.com/biography/Confucius\">Confucius</a> (551–479 BCE) in China and <a href=\"https://www.britannica.com/biography/Chanakya\">Kautilya</a>(flourished 300 BCE) in India. Writings by the historian <a href=\"https://www.britannica.com/biography/Ibn-Khaldun\">Ibn Khaldūn</a> (1332–1406) in <a href=\"https://www.britannica.com/place/North-Africa\">North Africa</a> have greatly influenced the study of politics in the Arabic-speaking world. But the fullest explication of politics has been in the West. Some have identified <a href=\"https://www.britannica.com/biography/Plato\">Plato</a> (428/427–348/347 BCE), whose ideal of a stable <a href=\"https://www.britannica.com/topic/republic-government\">republic</a> still yields insights and <a href=\"https://www.merriam-webster.com/dictionary/metaphors\">metaphors</a>, as the first political scientist, though most consider <a href=\"https://www.britannica.com/biography/Aristotle\">Aristotle</a> (384–322 BCE), who introduced <a href=\"https://www.merriam-webster.com/dictionary/empirical\">empirical</a> observation into the study of politics, to be the discipline’s true founder.</div>', 9, '2024-10-30 11:43:20', '2024-10-30 11:43:20', NULL);

-- --------------------------------------------------------

--
-- Table structure for table `users`
--

CREATE TABLE `users` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `name` varchar(255) NOT NULL,
  `email` varchar(255) NOT NULL,
  `email_verified_at` timestamp NULL DEFAULT NULL,
  `user_role` smallint(6) NOT NULL DEFAULT 0 COMMENT '0:User,1:Admin',
  `password` varchar(255) NOT NULL,
  `remember_token` varchar(100) DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `users`
--

INSERT INTO `users` (`id`, `name`, `email`, `email_verified_at`, `user_role`, `password`, `remember_token`, `created_at`, `updated_at`) VALUES
(1, 'admin', 'admin@gmail.com', NULL, 1, '$2y$10$oZG854RfbXDww5iSdnJ21eIH763/AxqSP4G6YVpEN28OJ0cStekxG', NULL, '2024-10-28 12:17:20', '2024-10-28 12:17:20'),
(2, 'mehedi', 'mehedi@gmail.com', NULL, 0, '$2y$10$VhRy2NQoab62onBG.P9/i.jL.5eDDXot1OYXblV4mddoNfzNMys1y', NULL, '2024-10-28 12:18:03', '2024-10-28 12:18:03');

--
-- Indexes for dumped tables
--

--
-- Indexes for table `failed_jobs`
--
ALTER TABLE `failed_jobs`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `failed_jobs_uuid_unique` (`uuid`);

--
-- Indexes for table `inboxes`
--
ALTER TABLE `inboxes`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `migrations`
--
ALTER TABLE `migrations`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `password_resets`
--
ALTER TABLE `password_resets`
  ADD KEY `password_resets_email_index` (`email`);

--
-- Indexes for table `personal_access_tokens`
--
ALTER TABLE `personal_access_tokens`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `personal_access_tokens_token_unique` (`token`),
  ADD KEY `personal_access_tokens_tokenable_type_tokenable_id_index` (`tokenable_type`,`tokenable_id`);

--
-- Indexes for table `questions`
--
ALTER TABLE `questions`
  ADD PRIMARY KEY (`id`),
  ADD KEY `questions_topic_id_foreign` (`topic_id`);

--
-- Indexes for table `results`
--
ALTER TABLE `results`
  ADD PRIMARY KEY (`id`),
  ADD KEY `results_topic_id_foreign` (`topic_id`),
  ADD KEY `results_user_id_foreign` (`user_id`);

--
-- Indexes for table `rich_texts`
--
ALTER TABLE `rich_texts`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `rich_texts_field_record_type_record_id_unique` (`field`,`record_type`,`record_id`),
  ADD KEY `rich_texts_record_type_record_id_index` (`record_type`,`record_id`);

--
-- Indexes for table `skills`
--
ALTER TABLE `skills`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `skill_controllers`
--
ALTER TABLE `skill_controllers`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `topics`
--
ALTER TABLE `topics`
  ADD PRIMARY KEY (`id`),
  ADD KEY `topics_skill_id_foreign` (`skill_id`);

--
-- Indexes for table `users`
--
ALTER TABLE `users`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `users_email_unique` (`email`);

--
-- AUTO_INCREMENT for dumped tables
--

--
-- AUTO_INCREMENT for table `failed_jobs`
--
ALTER TABLE `failed_jobs`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `inboxes`
--
ALTER TABLE `inboxes`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `migrations`
--
ALTER TABLE `migrations`
  MODIFY `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=59;

--
-- AUTO_INCREMENT for table `personal_access_tokens`
--
ALTER TABLE `personal_access_tokens`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `questions`
--
ALTER TABLE `questions`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=25;

--
-- AUTO_INCREMENT for table `results`
--
ALTER TABLE `results`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `rich_texts`
--
ALTER TABLE `rich_texts`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `skills`
--
ALTER TABLE `skills`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=12;

--
-- AUTO_INCREMENT for table `skill_controllers`
--
ALTER TABLE `skill_controllers`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `topics`
--
ALTER TABLE `topics`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=25;

--
-- AUTO_INCREMENT for table `users`
--
ALTER TABLE `users`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=3;

--
-- Constraints for dumped tables
--

--
-- Constraints for table `questions`
--
ALTER TABLE `questions`
  ADD CONSTRAINT `questions_topic_id_foreign` FOREIGN KEY (`topic_id`) REFERENCES `topics` (`id`) ON DELETE CASCADE;

--
-- Constraints for table `results`
--
ALTER TABLE `results`
  ADD CONSTRAINT `results_topic_id_foreign` FOREIGN KEY (`topic_id`) REFERENCES `topics` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `results_user_id_foreign` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE;

--
-- Constraints for table `topics`
--
ALTER TABLE `topics`
  ADD CONSTRAINT `topics_skill_id_foreign` FOREIGN KEY (`skill_id`) REFERENCES `skills` (`id`) ON DELETE CASCADE;
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
